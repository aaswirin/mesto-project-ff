{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/settings.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["/**\n * Настройки для разметки и прочая, и прочая...\n * При изменении разметки править здесь\n *\n * @type {object} Настройки\n */\nexport const settings = {\n  idTemplate: \"#card-template\",                     // Id template'а для карт\n  classPlacesList: '.places__list',                 // Класс места для укладки карт\n  classPlacesItem: '.places__item',                 // Класс для карты\n  classCardImage: '.card__image',                   // Класс для картинки карты\n  classCardTitle: '.card__title',                   // Класс для подписи карты\n  classCardDeleteButton: '.card__delete-button',    // Класс для кнопки удаления карты\n  classListItem: 'li.places__item',                 // Тэг и Класс места для укладки карт\n  // Для окон\n  classWindowPopup: '.popup__content',               // Класс для содержимого окон\n  classWindowOpen: '.popup_is-opened',               // Класс для показа окна\n  classWindowOpenNotDot: 'popup_is-opened',          // Класс для показа окна (без точки)\n  classWindowAnimatedNotDot: 'popup_is-animated',    // Класс для анимации\n  classElementClose: '.popup__close',                // Класс для кнопки закрытия окна\n  classForm: '.popup__form',                         // Класс формы\n  classInput: '.popup__input',                       // Класс поля ввода\n  classSubmitButton: '.popup__button',               // Класс кнопки на форме\n  classSubmitLabel: '.popup__button-label',          // Класс подписи кнопки на форме\n  classSpinner: '.popup__spinner',                   // Класс спиннера кнопки на форме\n  classSpinnerVisible: 'popup__spinner-visible',     // Класс включения спиннера кнопки на форме\n  keysClose: [                                       // Список клавиш, по которым закрываем окно. Вдруг поменяется?\n    'Escape',\n    //'F10',\n  ],\n  // Редактировать аватар\n  classButtonEditAvatar: '.profile__image',          // Класс для кнопки \"Редактировать аватар\"\n  classWindowEditAvatar: '.popup_edit-avatar',       // Класс для окна \"Редактировать профиль\"\n  bindAvatar: [                                      // Связки полей на форме и на странице\n    {\n      name: 'link',\n      nameForm: 'link-avatar',\n    },\n  ],\n  // Редактировать профиль\n  classButtonEditProfile: '.profile__edit-button',   // Класс для кнопки \"Редактировать профиль\"\n  classWindowEditProfile: '.popup_type_edit',        // Класс для окна \"Редактировать профиль\"\n  bindProfile: [                                     // Связки полей на форме и на странице и в API\n    {\n      classPage: '.profile__title',                  // Класс на странице\n      nameAPI: 'name',                               // Имя в API\n      nameForm: 'name',                              // Имя на форме\n      typeElement: 'text',                           // Тип элемента text или image\n    },\n    {\n      classPage: '.profile__description',\n      nameAPI: 'about',\n      nameForm: 'description',\n      typeElement: 'text',\n    },\n    {\n      classPage: '.profile__image',\n      nameAPI: 'avatar',\n      nameForm: '',\n      typeElement: 'image',\n    },\n  ],\n  // Добавить карту\n  classButtonAddCard: '.profile__add-button',        // Класс для кнопки \"Добавить карту\"\n  classWindowAddCard: '.popup_type_new-card',        // Класс для окна \"Добавить карту\"\n  bindCard: [                                        // Связки полей на форме и на странице\n    {\n      name: 'name',                                  // Имя значения объекта для создания карты\n      nameForm: 'place-name',                        // Имя на форме, откуда взять значение\n    },\n    {\n      name: 'link',\n      nameForm: 'link',\n    },\n  ],\n  // Просмотр картинки\n  classWindowViewImage: '.popup_type_image',                       // Класс для окна \"Просмотр картинки\"\n  classViewImage: '.popup__image',                                 // Класс для картинки, которую показываем\n  classViewCaption: '.popup__caption',                             // Подпись под картинкой, которую показываем\n  // Показ сообщения\n  classWindowMessage: '.popup_message',                            // Класс для окна \"Всякие сообщения\"\n  classCaptionMessage: '.popup__title',                            // Класс для заголовка окна \"Всякие сообщения\"\n  classTextMessage: '.popup__text',                                // Класс для текста окна \"Всякие сообщения\"\n  classMarkerCall: '.popup__marker-call',                          // Класс для кнопки окна \"Всякие сообщения\", если нужно что-то выполнить\n  // Лайк карты\n  classLikeButton: '.card__like-button',                           // Класс для кнопки лайка\n  classLikeYesNotDot: 'card__like-button_is-active',               // Класс для установки лайка (без точки)\n  classLikesCount: '.card__likes-count',                           // Класс для количества лайков на карте\n  classLikesTooltip: '.card__tooltip',                             // Класс для списка поставивших лайк\n  classItemTooltip: 'card__tooltip-item',                          // Класс для элемента списка поставивших лайк\n  classTitleTooltip: 'card__tooltip-title',                        // Класс для заголовка списка поставивших лайк\n  classImageTooltip: 'card__tooltip-image',                        // Класс для изображения списка поставивших лайк\n  classTextTooltip: 'card__tooltip-text',                          // Класс для текста списка поставивших лайк\n  countLikeInTooltip: 5,                                           // Количество лайков для показа\n  // Валидация\n  classErrorValidation: 'popup__input-error',                      // Класс для подчёркивания поля ввода при ошибке\n  classValidationContainer: 'popup__input-error-container-active', // Класс для описания ошибки валидации\n  classButtonInActive: 'popup__button-inactive',                   // Класс для неактивной кнопки формы\n  // API\n  apiIdUser: '',                                                   // Здесь будет храниться полученный Id пользователя\n  apiURL: 'https://nomoreparties.co/v1/',                          // Адрес сервера проекта \"Место\"\n  apiIdGroup: 'wff-cohort-35',                                     // Идентификатор группы\n  apiToken: '1e636933-64cf-4fb7-82cc-a4047b92f087',                // Токен\n  methodProfile: 'users/me',                                       // Метод API для профиля\n  methodCard: 'cards',                                             // Метод API для карт\n  methodLike: 'cards/likes',                                       // Метод API для лайков\n  methodAvatar: 'users/me/avatar',                                 // Метод API для обновления аватара\n}\n","/*\n Карты\n */\n\n\n/**\n * Создание карты\n *\n * @param {Object} objectPlace Место для создания\n * @param {string} objectPlace.name Наименование Места\n * @param {string} objectPlace.link URL картинки\n * @param {string} objectPlace[_id] Id картинки в URL\n * @param {Object} objectPlace.owner Id владельца карты\n * @param {DocumentFragment} cardTemplate Заготовка\n * @param {Object} settings Настройки\n * @param {Object} objectFunctions callback'и\n * @param {onDeleteCard} objectFunctions.onDeleteCard Функция удаления карты\n * @param {onOpenPreview} objectFunctions.onOpenPreview Функция показа картинки\n * @param {onLikeCard} objectFunctions.onLikeCard Функция лайка\n * @returns {HTMLElement} Карточка для размещения на странице\n */\nfunction createCard(objectPlace, cardTemplate, settings,\n                    objectFunctions) {\n  const newPlace = cardTemplate.querySelector(settings.classPlacesItem).cloneNode(true);\n\n  // Изображение\n  const cardImage = newPlace.querySelector(settings.classCardImage);\n  cardImage.setAttribute('src', objectPlace.link);\n  cardImage.setAttribute('alt', 'Место на картинке: ' + objectPlace.name);\n  // Показ картинки \"во всей красе\"\n  cardImage.addEventListener('click', event => objectFunctions.onOpenPreview(event));\n  // Подпись\n  newPlace.querySelector(settings.classCardTitle).textContent = objectPlace.name;\n  // Кнопка Удалить\n  const elementCardDeleteButton = newPlace.querySelector(settings.classCardDeleteButton);\n  if (objectPlace.owner['_id'] === settings.apiIdUser) {  // Моя карта, могу и удалить\n    elementCardDeleteButton.addEventListener('click', () => objectFunctions.onDeleteCard(newPlace, objectPlace['_id']));\n  } else {                                                // Чужая карта, удалять ни-ни\n    elementCardDeleteButton.remove();\n  }\n  // Лайк карточки\n  newPlace.querySelector(settings.classLikeButton)\n    .addEventListener('click', event => objectFunctions.onLikeCard(event, objectPlace['_id'], settings));\n\n  // Обработать лайки\n  initialLike(newPlace, objectPlace, settings);\n  return newPlace;\n}\n\n/**\n * Работа с лайками\n *\n * @param {HTMLElement} elementPlace Карта для загрузки лайков\n * @param {Object} objectPlace Данные карты\n * @param {Object} settings Настройки\n */\nexport function initialLike(elementPlace, objectPlace, settings) {\n  // Количество лайков\n  const likesCount = objectPlace.likes.length;\n  elementPlace.querySelector(settings.classLikesCount).textContent = likesCount.toString();\n\n  // Список тех, кто лайк поставил\n  const likesTooltip = elementPlace.querySelector(settings.classLikesTooltip);\n  // Зачистить предыдущий список\n  let child = likesTooltip.lastElementChild;\n  while (child) {\n    likesTooltip.removeChild(child);\n    child = likesTooltip.lastElementChild;\n  }\n  const listItem = document.createElement('li');\n  listItem.classList.add(settings.classTitleTooltip);\n  if (likesCount === 0) {\n    listItem.textContent = 'Увы, лайков нет...';\n  } else {\n    listItem.textContent = 'Лайки этого места:';\n    let addLike = 0;  // Сколько добавлено\n    let overLike = 0; // Лишние лайки\n    objectPlace.likes.forEach((like) => {\n      // Свой лайк не потерять!\n      if (like['_id'] === settings.apiIdUser) {\n        elementPlace.querySelector(settings.classLikeButton).classList.add(settings.classLikeYesNotDot);\n      }\n      if (addLike <= settings.countLikeInTooltip + 1) {  // Можно добавлять\n        // Элемент списка\n        const listItem = document.createElement('li');\n        listItem.classList.add(settings.classItemTooltip);\n        // Аватар\n        const imageAvatar = document.createElement('img');\n        imageAvatar.classList.add(settings.classImageTooltip);\n        imageAvatar.setAttribute('src', like.avatar);\n        imageAvatar.setAttribute('alt', 'Установил лайк: ' + like.name);\n        listItem.append(imageAvatar);\n        // Имя\n        const spanName = document.createElement('span');\n        spanName.classList.add(settings.classTextTooltip);\n        spanName.textContent = like.name;\n        listItem.append(spanName);\n        // Добавить в список лайкнувшего (обожаю русский язык!)\n        likesTooltip.append(listItem);\n        addLike++;\n      } else {  // Уже лишние\n        overLike++;\n      }\n    })\n    if (overLike !== 0) {\n      const listItem = document.createElement('li');\n      listItem.classList.add(settings.classTitleTooltip);\n      listItem.textContent = `...и ещё ${overLike}`;\n    }\n  }\n  // Добавить в список заголовок\n  likesTooltip.prepend(listItem);\n}\n\n/**\n * Удаление карты\n *\n * @param {HTMLElement} cardDelete Карта для удаления\n */\nexport function removeCard(cardDelete) {\n  if (cardDelete === null) return;\n\n  cardDelete.remove();                 // Можно удалять!\n}\n\n/**\n * Поставить/снять лайк картинки\n * @param {HTMLElement} elementLike Кнопка лайка\n * @param {Object} settings Настройки\n */\nexport function likeCard (elementLike, settings) {\n  elementLike.classList.toggle(settings.classLikeYesNotDot);\n}\n\n/**\n * Вывести карты на страницу\n *\n * @param {Object[]} initCards Массив описаний карт\n * @param {string} initCards.name Наименование Места\n * @param {string} initCards.link URL картинки\n * @param {string} initCards.owner Владелец карты\n * @param {Object} settings Настройки\n * @param {boolean} addToBegin Создавать карты в начале\n * @param {DocumentFragment} cardTemplate Заготовка\n * @param {Element} placesContainer Место для укладки карт\n * @param {onOpenPreview} onOpenPreview Функция для просмотра изображения\n * @param {onDeleteCard} onDeleteCard Функция для удаления карты\n * @param {onLikeCard} onLikeCard Функция для постановки/снятия лайка\n */\nexport function initPlaces(initCards, settings, addToBegin,\n                           {cardTemplate,\n                            placesContainer,\n                            onOpenPreview,\n                            onDeleteCard,\n                            onLikeCard,\n                           } = {}) {\n  const objFunction = {\n    onDeleteCard,\n    onOpenPreview,\n    onLikeCard\n  };\n  initCards.forEach(function (item) {\n    let newPlace = createCard(item, cardTemplate, settings, objFunction);\n    if (addToBegin) placesContainer.prepend(newPlace)\n    else placesContainer.append(newPlace);\n  });\n}\n","/*\n Модальные окна\n */\n\n/**\n * Проверка на mouseup вне модальном окне\n *\n * @param {Event} event Событие 'mouseup' на документе\n * @param {Object} settings Настройки\n * @returns {boolean} результат проверки\n */\nexport function verifyEventMouseUp(event, settings) {\n  // На окне клацнули? Если да, то не закрываем!\n  return event.target.closest(settings.classWindowPopup) === null;\n}\n\n/**\n * Проверка нажатой клавиши на модальном окне\n *\n * @param {Event} event Событие 'keydown' на документе\n * @param {Object} settings Настройки\n * @returns {boolean} результат проверки\n */\nexport function verifyEventKeyDown(event, settings) {\n  // Поискать клавишу в списке\n  return settings.keysClose.findIndex(function (element) {\n    return element === event.key;\n  }) !== -1;\n}\n\n/**\n * Инициализация модального окна\n *\n * @param {HTMLElement} elementWindow Окно для поднятия\n * @param {Object} settings Настройки\n * @param {Object} objListener Слушатели\n * @param {function} objListener.close Закрытие по клику\n * @param {function} objListener.closeUp Закрытие по клику вне окна\n */\nexport function setModalWindowEventListeners(elementWindow, settings, objListener) {\n  // Обеспечить анимацию\n  elementWindow.classList.add(settings.classWindowAnimatedNotDot);\n  // Обеспечить закрытие по крестику\n  elementWindow.querySelector(settings.classElementClose)\n    .addEventListener('click',  () => objListener.close(elementWindow, objListener.close));\n  // Для снятия открытого окна по клику вне окна\n  elementWindow\n    .addEventListener('mouseup', event => objListener.closeUp(event, elementWindow, objListener.closeUp));\n}\n\n/**\n * Поднятие окна\n *\n * @param {HTMLElement} elementWindow Окно для поднятия\n * @param {Object} settings Настройки\n * @param {function} functionCloseKey Функция для снятия окна по клавише\n */\nexport function showPopup(elementWindow, settings, functionCloseKey) {\n  // Показать окно\n  elementWindow.classList.add(settings.classWindowOpenNotDot);\n  // Для снятия открытого окна по клавише\n  document.addEventListener('keydown', functionCloseKey);\n}\n\n/**\n * Закрытие окна\n *\n * @param {HTMLElement} elementWindow Окно для поднятия\n * @param {Object} settings Настройки\n * @param {function} functionCloseKey Функция для снятия окна по клавише\n */\nexport function closePopup(elementWindow, settings,functionCloseKey) {\n  // Закрыть окно\n  elementWindow.classList.remove(settings.classWindowOpenNotDot);\n  // Для снятия открытого окна по клавише\n  document.removeEventListener('keydown', functionCloseKey);\n}\n","/*\n Валидация\n */\n\n/**\n * Включение валидации\n *\n * @param {Object} settings Настройки\n */\nexport function enableValidation(settings) {\n  // Все формы\n  const formList = Array.from(document.querySelectorAll(settings.classForm));\n\n  formList.forEach((elementForm) => {\n    const elementButton = elementForm.querySelector(settings.classSubmitButton);\n    setEventListeners(elementForm, elementButton, settings);\n  });\n}\n/**\n * Очистка ошибок валидации для формы\n *\n * @param {HTMLElement} elementForm Форма для валидации\n * @param {HTMLElement} elementButton Кнопка формы\n * @param {Object} settings Настройки\n */\nexport function clearValidation(elementForm, elementButton, settings) {\n  // Все поля внутри формы\n  const listInput = Array.from(elementForm.querySelectorAll(settings.classInput));\n\n  listInput.forEach((elementInput) => {\n    hideInputError(elementInput, settings)  });\n\n  // Переключить кнопку\n  toggleStateButton(listInput, elementButton, settings);\n  // Убрать показ загрузки\n  elementButton.querySelector(settings.classSubmitLabel).textContent = \"Сохранить\";\n  elementButton.querySelector(settings.classSpinner).classList.remove(settings.classSpinnerVisible);\n}\n\n/**\n * Установка валидации на все поля\n *\n * @param {HTMLElement} elementForm Форма для валидации\n * @param {HTMLElement} elementButton Кнопка формы\n * @param {Object} settings Настройки\n */\nfunction setEventListeners(elementForm, elementButton, settings) {\n  // Все поля внутри формы\n  const listInput = Array.from(elementForm.querySelectorAll(settings.classInput));\n\n  listInput.forEach((elementInput) => {\n    elementInput.addEventListener('input', () => {\n      isValid(elementForm, elementInput, listInput, elementButton, settings);\n    });\n  });\n}\n\n/**\n * Проверка правильности введённых данных\n *\n * @param {HTMLElement} elementForm Форма\n * @param {HTMLElement} elementInput Поле ввода\n * @param {Array} listInput Список полей ввода\n * @param {HTMLElement} elementButton Кнопка на форме\n * @param {Object} settings Настройки\n */\nfunction isValid(elementForm, elementInput, listInput, elementButton, settings) {\n  if (elementInput.validity.patternMismatch) {\n    elementInput.setCustomValidity(elementInput.dataset.errorMessage);\n  } else {\n    elementInput.setCustomValidity(\"\");\n  }\n\n  if (!elementInput.validity.valid) {\n    showInputError(elementInput, elementInput.validationMessage, settings);\n  } else {\n    hideInputError(elementInput, settings);\n  }\n\n  // Переключить кнопку\n  toggleStateButton(listInput, elementButton, settings);\n}\n\n/**\n * Добавить класс с ошибкой\n *\n * @param {HTMLElement} elementInput Поле ввода\n * @param {String} errorMessage Сообщение об ошибке валидации\n * @param {Object} settings Настройки\n */\nfunction showInputError(elementInput, errorMessage, settings) {\n  const containerError = document.querySelector(`.popup__input-error-${elementInput.id}`);\n  elementInput.classList.add(settings.classErrorValidation);\n  // Прописать ошибку\n  containerError.textContent = errorMessage;\n  containerError.classList.add(settings.classValidationContainer);\n}\n\n/**\n * Удалить класс с ошибкой\n * @param {HTMLElement} elementInput Поле ввода\n * @param {Object} settings Настройки\n */\nfunction hideInputError(elementInput, settings) {\n  const containerError = document.querySelector(`.popup__input-error-${elementInput.id}`);\n  elementInput.classList.remove(settings.classErrorValidation);\n  containerError.textContent = '';\n  containerError.classList.remove(settings.classValidationContainer);\n}\n\n/**\n * Проверить валидность полей на форме\n *\n * @param {Array} listInput Список полей ввода\n */\nfunction hasInvalidForm(listInput) {\n  // проход по полям на форме\n  return listInput.some((elementInput) => {\n    return !elementInput.validity.valid;\n  })\n}\n\n/**\n * Переключить кнопку\n *\n * @param {Array} listInput Список полей ввода\n * @param {HTMLElement} elementButton Кнопка на форме\n * @param {Object} settings Настройки\n */\nfunction toggleStateButton(listInput, elementButton, settings) {\n  buttonSetState(elementButton, hasInvalidForm(listInput), settings);\n}\n\n/**\n * Проверка правильности введённых данных\n *\n * @param {HTMLElement} elementButton Кнопка на форме\n * @param {Boolean} disabled Установить в disabled\n * @param {Object} settings Настройки\n */\nexport function buttonSetState(elementButton, disabled, settings) {\n  elementButton.disabled = disabled;\n  if (disabled)  elementButton.classList.add(settings.classButtonInActive);\n  else elementButton.classList.remove(settings.classButtonInActive);\n}\n","/*\n Общение с API\n */\n\n/**\n * Обратиться к API\n *\n * @param {Object} promises горстка promis'ов\n * @param {Array} callbacks Обработчики для promis'ов\n * @param {Object} extraData дополнительные данные для callback'ов\n * @param {Object} settings Настройки\n */\nfunction callingAPI(promises, callbacks, extraData, settings) {\n  Promise.all(promises)\n    .then((res) =>{\n      res.forEach((response, index) => {\n        response.json()\n          .then((data) => {\n            if (res[index].ok) {\n              callbacks[index](true, data, extraData, settings);\n            } else {\n              let error = `Ошибка ${res[index].status}`;\n              // Уточнить ошибку\n              if (typeof data.message !== 'undefined') {\n                error = error + `: ${data.message}`;\n              }\n              return Promise.reject(error);\n            }\n          })\n          .catch((err) => {\n            callbacks[0](false, {error: err}, extraData, settings);\n          });\n        });\n      })\n      .catch((err) => {\n        callbacks[0](false, {error: err}, extraData, settings);\n      });\n}\n\n/**\n * Собрать параметры для вызова API\n *\n * @param {Object} params Параметры\n * @param {String} params.nameMethod Имя метода в API\n * @param {String} params.method Метод вызова\n * @param {Object} params.body Тело запроса\n * @param {String} params.id Id для запросов\n * @param {Object} settings Настройки\n * @return {Promise} Сформированный промис\n */\nfunction buildPromiseCall(params, settings) {\n  let url = `${settings.apiURL}${settings.apiIdGroup}/${params.nameMethod}`;\n\n  const options = {\n      method: params.method,\n      headers: {\n        authorization: settings.apiToken,\n      },\n    };\n\n  if (params.id !== null) {\n    url = url + `/${params.id}`;\n  }\n  if (params.body !== null) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params.body);\n  }\n\n  return fetch(url, options)\n}\n/**\n * Получить из API профиль и карты\n *\n * @param {onLoadAndSetProfileAPI} onLoadAndSetProfileAPI Функция обработки результатов запроса профиля\n * @param {onLoadCardsAPI} onLoadCardsAPI Функция обработки результатов запроса карт\n * @param {Object} settings Настройки\n */\nexport function getProfileAndCard(onLoadAndSetProfileAPI, onLoadCardsAPI, settings) {\n  const promiseAll = [\n    buildPromiseCall({nameMethod: settings.methodProfile, method: 'GET', body: null, id: null}, settings),\n    buildPromiseCall({nameMethod: settings.methodCard, method: 'GET', body: null, id: null}, settings),\n  ];\n\n  const callbacks = [\n    onLoadAndSetProfileAPI,\n    onLoadCardsAPI,\n  ];\n  callingAPI(promiseAll, callbacks, null, settings);\n}\n\n/**\n * Отправить в API профиль\n *\n * @param {onSetProfileAPI} onSetProfileAPI Функция обработки результатов отправки профиля\n * @param {Object} data Данные профиля\n * @param {String} data.name Имя профиля\n * @param {String} data.about Описание профиля\n * @param {HTMLElement} data.buttonSubmit Кнопка \"Сохранить\"\n * @param {Object} settings Настройки\n */\nexport function setProfile(onSetProfileAPI, data, settings) {\n  const promiseAll = [\n    buildPromiseCall(\n      {nameMethod: settings.methodProfile, method: 'PATCH',\n        body: {name: data.name, about: data.about}, id: null},\n      settings),\n  ];\n\n  const callbacks = [\n    onSetProfileAPI\n  ];\n\n  data.buttonSubmit.querySelector(settings.classSubmitLabel).textContent = \"Сохранить...\";\n  data.buttonSubmit.querySelector(settings.classSpinner).classList.add(settings.classSpinnerVisible);\n  callingAPI(promiseAll, callbacks, null, settings);\n}\n\n/**\n * Отправить в API новую карту\n *\n * @param {onSetCardAPI} onSetCardAPI Функция обработки результатов отправки карты\n * @param {Object} data Данные карты\n * @param {String} data.name Имя карты\n * @param {String} data.link URL карты\n * @param {HTMLElement} data.buttonSubmit Кнопка \"Сохранить\"\n * @param {Object} settings Настройки\n */\nexport function setCard(onSetCardAPI, data, settings) {\n  const promiseAll = [\n    buildPromiseCall(\n      {nameMethod: settings.methodCard, method: 'POST', body: {name: data.name, link: data.link}, id: null},\n      settings),\n  ];\n\n  const callbacks = [\n    onSetCardAPI\n  ];\n\n  data.buttonSubmit.querySelector(settings.classSubmitLabel).textContent = \"Сохранить...\";\n  data.buttonSubmit.querySelector(settings.classSpinner).classList.add(settings.classSpinnerVisible);\n  callingAPI(promiseAll, callbacks, null, settings);\n}\n\n/**\n * Удалить в API карту\n *\n * @param {onDeleteCardAPI} onDeleteCardAPI Функция обработки результатов удаления карты\n * @param {Object} data Данные карты\n * @param {String} data.id Id карты\n * @param {HTMLElement} data.element Карта для удаления\n * @param {Object} settings Настройки\n */\nexport function deleteCard(onDeleteCardAPI, data, settings) {\n  const promiseAll = [\n    buildPromiseCall({nameMethod: settings.methodCard, method: 'DELETE', body: null, id: data.id}, settings),\n  ];\n\n  const callbacks = [\n    onDeleteCardAPI\n  ];\n  callingAPI(promiseAll, callbacks, data, settings);\n}\n\n/**\n * Отправить лайк на карту в API\n *\n * @param {onSetLikeAPI} onSetLikeAPI Функция обработки результатов удаления карты\n * @param {Object} data Данные карты\n * @param {String} data.id Id карты\n * @param {HTMLElement} data.elementCard Карта лайка\n * @param {HTMLElement} data.elementLike Кнопка лайка\n * @param {Object} settings Настройки\n */\nexport function setLike(onSetLikeAPI, data, settings) {\n  const promiseAll = [\n    buildPromiseCall({nameMethod: settings.methodLike, method: 'PUT', body: null, id: data.id}, settings),\n  ];\n\n  const callbacks = [\n    onSetLikeAPI\n  ];\n  callingAPI(promiseAll, callbacks, data, settings);\n}\n\n/**\n * Отправить удаление лайка на карте в API\n *\n * @param {onDeleteLikeAPI} onDeleteLikeAPI Функция обработки результатов удаления карты\n * @param {Object} data Данные карты\n * @param {String} data.id Id карты\n * @param {HTMLElement} data.elementCard Карта лайка\n * @param {HTMLElement} data.elementLike Кнопка лайка\n * @param {Object} settings Настройки\n */\nexport function deleteLike(onDeleteLikeAPI, data, settings) {\n  const promiseAll = [\n    buildPromiseCall({nameMethod: settings.methodLike, method: 'DELETE', body: null, id: data.id}, settings),\n  ];\n\n  const callbacks = [\n    onDeleteLikeAPI\n  ];\n  callingAPI(promiseAll, callbacks, data, settings);\n}\n\n/**\n * Обновить аватар в API\n *\n * @param {onEditAvatarAPI} onEditAvatarAPI Функция обработки результатов обновления аватара\n * @param {Object} data Данные аватара\n * @param {String} data.link URL аватара\n * @param {HTMLElement} data.buttonSubmit Кнопка \"Сохранить\"\n * @param {Object} settings Настройки\n */\nexport function updateAvatar(onEditAvatarAPI, data, settings) {\n  const promiseAll = [\n    buildPromiseCall({nameMethod: settings.methodAvatar, method: 'PATCH', body: {avatar: data.link}, id: null}, settings),\n  ]\n  const callbacks = [\n    onEditAvatarAPI\n  ];\n\n  data.buttonSubmit.querySelector(settings.classSubmitLabel).textContent = \"Сохранить...\";\n  data.buttonSubmit.querySelector(settings.classSpinner).classList.add(settings.classSpinnerVisible);\n  callingAPI(promiseAll, callbacks, null, settings);\n}\n","/*\n Главная, отсюда всё и начинается\n */\n\n// Импорт главного файла стилей\nimport '../pages/index.css';\n// Настройки проекта\nimport {settings} from '../components/settings.js';\n// Функция для создания карт при инициализации\nimport {initPlaces, likeCard, removeCard, initialLike} from '../components/card.js';\n// Обработка окон\nimport {showPopup, closePopup, verifyEventMouseUp, verifyEventKeyDown, setModalWindowEventListeners} from '../components/modal.js';\n// Валидация\nimport {enableValidation, clearValidation, buttonSetState} from '../components/validation.js';\n// API\nimport {getProfileAndCard, setProfile, setCard, deleteCard, setLike, deleteLike, updateAvatar} from '../components/api.js';\n\n/** Заготовка */\nconst cardTemplate = document.querySelector(settings.idTemplate).content;\n\n/** DOM узлы по потребности */\nconst placesContainer = document.querySelector(settings.classPlacesList);      // Место для укладки карт\n\nconst windowAvatar = document.querySelector(settings.classWindowEditAvatar);   // Окно \"Редактировать аватар\"\nconst formAvatar = windowAvatar.querySelector(settings.classForm);             // Форма \"Редактировать аватар\"\nconst buttonAvatar = formAvatar.querySelector(settings.classSubmitButton);     // Кнопка \"Редактировать аватар\"\n\nconst windowProfile = document.querySelector(settings.classWindowEditProfile);  // Окно \"Редактировать профиль\"\nconst formProfile = windowProfile.querySelector(settings.classForm);            // Форма \"Редактировать профиль\"\nconst buttonProfile = formProfile.querySelector(settings.classSubmitButton);    // Кнопка \"Редактировать профиль\"\n\nconst windowCard = document.querySelector(settings.classWindowAddCard);         // Окно \"Добавить карту\"\nconst formCard = windowCard.querySelector(settings.classForm);                  // Форма \"Добавить карту\"\nconst buttonCard = formCard.querySelector(settings.classSubmitButton);          // Кнопка \"Добавить карту\"\n\nconst windowImage = document.querySelector(settings.classWindowViewImage);      // Окно \"Показать картинку\"\nconst viewImage= windowImage.querySelector(settings.classViewImage);            // Изображение на форме \"Показать картинку\"\n\nconst windowMessage = document.querySelector(settings.classWindowMessage);       // Окно \"Всякие сообщения\"\nconst captionMessage= windowMessage.querySelector(settings.classCaptionMessage); // Заголовок окна \"Всякие сообщения\"\nconst textMessage= windowMessage.querySelector(settings.classTextMessage);       // Текст окна \"Всякие сообщения\"\nconst buttonMessage = windowMessage.querySelector(settings.classSubmitButton);   // Кнопка окна \"Всякие сообщения\"\n\n// Редактировать аватар\ndocument.querySelector(settings.classButtonEditAvatar).addEventListener('click', openEditAvatar);\n\n// Редактировать профиль\ndocument.querySelector(settings.classButtonEditProfile).addEventListener('click', openEditProfile);\n\n// Добавление карту\ndocument.querySelector(settings.classButtonAddCard).addEventListener('click', openAddCard);\n\n\n/*\n * Работа с формами\n */\n\n/**\n * Поиск формы внутри окна\n *\n * @param {HTMLElement} elementWindow Окно формы\n * @return {string} Имя формы\n */\nfunction findForm(elementWindow) {\n  const form = elementWindow.querySelector(settings.classForm);\n  if (form === null) return '';\n\n  return form.getAttribute('name');\n}\n\n/**\n * Инициализация формы\n *\n * @param {HTMLElement} elementWindow Окно формы\n * @param {Object[]} bindFields связки полей\n * @param {string} bindFields.classPage Класс элемента из которого нужно взять значение\n * @param {string} bindFields.nameForm Имя на форме, куда нужно записать значение\n */\nfunction initPopup(elementWindow, bindFields) {\n  const nameForm = findForm(elementWindow);\n  if (nameForm === '') return;\n\n  bindFields.forEach(function (element,) {\n    if (element.nameForm === '') return;   // Этого поля нет на форме\n    const textElement = document.querySelector(element.classPage);\n    if (textElement === null) return;\n\n    document.forms[nameForm].elements[element.nameForm].value = textElement.textContent;\n  });\n}\n\n/**\n * Инициализация показа картинки\n *\n * @param {HTMLElement} elementWindow Окно формы\n * @param {HTMLElement} elementImages Картинка на странице\n */\nfunction initImage(elementWindow, elementImages) {\n  // Напихать в окно всё из карты\n  viewImage.setAttribute('src', elementImages.getAttribute('src'));\n  viewImage.setAttribute('alt', elementImages.getAttribute('alt'));\n\n  // Поискать карту выше и выше, вдруг враги разметку поменяли\n  const placeCurrent = elementImages.closest(settings.classListItem);\n  if (placeCurrent === null) return;\n\n  elementWindow.querySelector(settings.classViewCaption).textContent = placeCurrent.querySelector(settings.classCardTitle).textContent\n}\n\n/**\n * Очистка формы\n *\n * @param {HTMLElement} elementWindow Окно формы\n */\nfunction clearForm(elementWindow) {\n  const nameForm = findForm(elementWindow);\n  if (nameForm === '') return;\n\n  // Теперь можно и прибраться\n  document.forms[nameForm].reset();\n}\n\n/**\n * Результат формы для добавления профиля на страницу\n *\n * @param {Object} data Данные из API, если это после запроса, иначе {}\n * @param {Boolean} result Результат запроса в API\n * @param {Object[]} bindFields связки полей\n * @param {string} bindFields.classPage Класс элемента из которого нужно взять значение\n * @param {string} bindFields.nameAPI Имя в объекте из API\n * @param {string} bindFields.typeElement Тип элемента: 'text' или 'image'\n */\nfunction editProfile(data, result, bindFields) {\n  // Из объекта на страницу по настройке\n  bindFields.forEach(function (element) {\n    const htmlElement = document.querySelector(element.classPage);\n    if (htmlElement === null) return;\n\n    const value = data[element.nameAPI]\n\n    if (element.typeElement === 'text') htmlElement.textContent = value;\n    else if (element.typeElement === 'image') {\n      htmlElement.setAttribute('style', `background-image: url(${value});`);\n    }\n  });\n}\n\n/**\n * Результат формы для добавления карты на страницу\n *\n * @param {Object[]} data Данные из API, если это после запроса\n * @param {String} data.link URL картинки\n * @param {String} data.name URL картинки\n * @param {Boolean} result Результат запроса в API\n */\nfunction createNewCard(data, result) {\n  // Обработка\n  if (!result) return;  // В API произошла ошибка\n  const nameForm = findForm(windowCard);\n  if (nameForm === '') return;\n\n  initPlaces(data, settings, true, objParam);\n}\n\n/**\n *  Закончил работу с формами\n */\n\n/**\n * Закрывашка для всех окон\n *\n * @param {HTMLElement} elementWindow Окно формы\n * @param {function} functionCloseKey Функция для закрытия окна по клавише\n */\nfunction closeWindow(elementWindow, functionCloseKey) {\n  closePopup(elementWindow, settings, functionCloseKey);\n\n  if (elementWindow === windowMessage) buttonMessage.classList.remove(settings.classMarkerCall);\n\n  // ... и почистить форму\n  clearForm(elementWindow);\n}\n\n/**\n * Закрывашка для всех окон клику вне окна\n *\n * @param {Event} event Событие 'mouseup'\n * @param {HTMLElement} elementWindow Окно формы\n * @param {function} functionCloseKey Функция для закрытия окна по клавише\n */\nfunction closeWindowMouseUp(event, elementWindow, functionCloseKey) {\n  if (verifyEventMouseUp(event, settings)) closeWindow(elementWindow, functionCloseKey);\n}\n\n/**\n * Закрывашка для всех окон по клавише\n *\n * @param {Event} event Событие 'mouseup'\n */\nfunction closeWindowKey(event) {\n  if (!verifyEventKeyDown(event, settings)) return;\n\n  // Найти окно\n  const elementWindow = document.querySelector(settings.classWindowOpen);\n  if (elementWindow !== null) closeWindow(elementWindow, closeWindowKey);\n}\n\n/**\n * Запуск окна \"Редактировать аватар\"\n */\nfunction openEditAvatar() {\n  clearValidation(formAvatar, buttonAvatar, settings);\n\n  buttonSetState(buttonAvatar, true, settings);\n\n  showPopup(windowAvatar, settings, closeWindowKey);\n}\n\n/**\n * Обработка формы \"Редактировать аватар\"\n *\n * @param {Event} event Событие 'submit'\n */\nfunction submitAvatar(event) {\n  event.preventDefault();\n\n  // Отправить в API\n  const nameForm = findForm(windowAvatar);\n  if (nameForm === '') return;\n\n  // Из формы в API по настройке\n  const data = {};\n  settings.bindAvatar.forEach(function (element) {\n    data[element.name] = document.forms[nameForm].elements[element.nameForm].value\n  });\n  data.buttonSubmit = buttonAvatar;\n  updateAvatar(onEditAvatarAPI, data, settings);\n\n  closePopup(windowAvatar, settings, closeWindowKey);\n  // ... и почистить форму\n  clearForm(windowAvatar);\n}\n\n/**\n * Запуск окна \"Редактировать профиль\"\n */\nfunction openEditProfile() {\n  // Инициализировать поля\n  initPopup(windowProfile, settings.bindProfile);\n\n  clearValidation(windowProfile, buttonProfile, settings);\n  buttonSetState(buttonProfile, false, settings);\n\n  showPopup(windowProfile, settings, closeWindowKey);\n}\n\n/**\n * Обработка формы \"Редактировать профиль\"\n *\n * @param {Event} event Событие 'submit'\n */\nfunction submitProfile(event) {\n  event.preventDefault();\n\n  // Отправить в API\n  const nameForm = findForm(windowProfile);\n  if (nameForm === '') return;\n\n  // Из формы в API по настройке\n  const data = {};\n  settings.bindProfile.forEach(function (element) {\n    // Этот элемент в API не отправляется или его нет на форме\n    if ((element.nameAPI === '') || (element.nameForm === '')) return;\n    data[element.nameAPI] = document.forms[nameForm].elements[element.nameForm].value\n  });\n  data.buttonSubmit = buttonProfile;\n  setProfile(onLoadAndSetProfileAPI, data, settings);\n\n  closePopup(windowProfile, settings, closeWindowKey);\n  // ... и почистить форму\n  clearForm(windowProfile);\n}\n\n/**\n * Запуск окна \"Добавить карту\"\n *\n */\nfunction openAddCard() {\n  clearValidation(formCard, buttonCard, settings);\n\n  buttonSetState(buttonCard, true, settings);\n\n  showPopup(windowCard, settings, closeWindowKey);\n}\n\n/**\n * Обработка формы \"Добавить карту\"\n *\n * @param {Event} event Событие 'submit'\n */\nfunction submitCard(event) {\n  event.preventDefault();\n\n  // Отправить в API\n  const nameForm = findForm(windowCard);\n  if (nameForm === '') return;\n\n  // Из формы в API по настройке\n  const data = {};\n  settings.bindCard.forEach(function (element) {\n    data[element.name] = document.forms[nameForm].elements[element.nameForm].value\n  });\n  data.buttonSubmit = buttonCard;\n  setCard(onAddCardAPI, data, settings);\n\n  closePopup(windowCard, settings, closeWindowKey);\n  // ... и почистить форму\n  clearForm(windowCard);\n}\n\n/**\n *\n * @type {Object} Данные для дополнительных действий после закрытия окна с сообщением\n */\nconst dataToMessage = {\n  functionCall: null,\n  callback: null,\n  data: {},\n};\n\n/**\n * Обработка удаления Карты\n *\n * @callback onDeleteCard\n * @param {HTMLElement} elementPlace Карта\n * @param {String} idCard Id карты\n */\nfunction onDeleteCard(elementPlace, idCard) {\n  // Что запустить, после нажатия на кнопку\n  dataToMessage.functionCall = deleteCard;\n  dataToMessage.callback = onDeleteCardAPI;\n  dataToMessage.data.id = idCard;\n  dataToMessage.data.elementPlace = elementPlace;\n  buttonMessage.classList.add(settings.classMarkerCall);\n\n  // Сначала спросить\n  showMessage('Вы уверены?', '', 'Да');\n}\n\n/**\n * Поставить/снять лайк картинки\n * @callback onLikeCard\n * @param {Event} event Событие 'click' на кнопке\n * @param {String} idCard Id карты\n * @param {Object} settings Настройки\n */\nfunction onLikeCard(event, idCard, settings) {\n  if (event.target === null) return;\n\n  const data = {\n    id: idCard,\n    elementCard: event.target.closest(settings.classPlacesItem),\n    elementLike: event.target,\n  };\n  // Если лайк есть, то его надо снять, иначе поставить\n  if (event.target.classList.contains(settings.classLikeYesNotDot)) {\n    deleteLike(onLikeAPI, data, settings);\n  } else {\n    setLike(onLikeAPI, data, settings);\n  }\n}\n\n/**\n * Показ картинки в отдельном окне\n *\n * @callback onOpenPreview\n * @param {Event} event Событие 'click'\n */\nfunction onOpenPreview(event) {\n  // Инициализировать картинку\n  initImage(windowImage, event.target);\n\n  showPopup(windowImage, settings, closeWindowKey);\n}\n\n/**\n * Показать окно \"Всякие сообщения\"\n *\n * @param {String} titleMessage Заголовок\n * @param {String} textLabel Текст сообщения\n * @param {String} textButton Текст на кнопке\n */\nfunction showMessage(titleMessage, textLabel, textButton) {\n  captionMessage.textContent = titleMessage;\n  textMessage.textContent = textLabel;\n  buttonMessage.textContent = textButton;\n\n  showPopup(windowMessage, settings, closeWindowKey);\n}\n\n/**\n * Нажата кнопка в окне \"Всякие сообщения\"\n *\n */\nfunction clickMessageButton() {\n  // Что-то исполнить?\n  if (buttonMessage.classList.contains(settings.classMarkerCall)) {\n    dataToMessage.functionCall(dataToMessage.callback, dataToMessage.data, settings);\n  }\n\n  closeWindow(windowMessage, closeWindowKey);\n}\n\n/**\n * Работа с API. Загрузки...\n */\n/**\n * Обработка загрузки или обновления Профиля через API\n *\n * @callback onLoadAndSetProfileAPI\n * @param {Boolean} result результат запроса\n * @param {Object} data Данные запроса\n * @param {String} data.error Ошибка при result = false\n * @param {String} data.name Имя профиля\n * @param {String} data.about Описание профиля\n * @param {String} data.avatar URL картинки профиля\n * @param {String} data._id Id пользователя\n * @param {Object} extraData Дополнительные данные\n * @param settings\n */\nfunction onLoadAndSetProfileAPI(result, data, extraData, settings) {\n  if (result) {\n    settings.apiIdUser = data['_id'];\n    editProfile(data, result, settings.bindProfile);\n  }\n  else showMessage('Ошибка при загрузке', data['error'], 'Понятно'); // Ошибка при загрузке\n}\n\n/**\n * Обработка загрузки Карт через API\n *\n * @callback onLoadCardsAPI\n * @param {Boolean} result результат запроса\n * @param {Object} data Данные запроса\n * @param {String} data.error Ошибка при result = false\n * @param {String} data.name Имя профиля\n * @param {String} data.about Описание профиля\n * @param {String} data.avatar URL картинки профиля\n * @param {Object} extraData Дополнительные данные\n * @param settings\n */\nfunction onLoadCardsAPI(result, data, extraData, settings) {\n  if (result) initPlaces(data, settings, false, objParam);\n  else showMessage('Ошибка при загрузке', data['error'], 'Понятно'); // Ошибка при загрузке\n}\n\n/**\n * Обработка добавления Карты через API\n *\n * @callback onAddCardAPI\n * @param {Boolean} result результат запроса\n * @param {Object} data Данные запроса\n * @param {String} data.error Ошибка при result = false\n * @param {String} data.name Имя карты\n * @param {String} data.link URL картинки карты\n */\nfunction onAddCardAPI(result, data) {\n  if (result) {\n    const arrayData = [data];\n    createNewCard(arrayData, result);\n  }\n  else showMessage('Ошибка при загрузке', data['error'], 'Понятно'); // Ошибка при загрузке\n}\n\n/**\n * Обработка удаления Карты через API\n *\n * @callback onDeleteCardAPI\n * @param {Boolean} result результат запроса\n * @param {Object} data Данные запроса\n * @param {String} data.error Ошибка при result = false\n * @param {String} data.name Имя карты\n * @param {String} data.link URL картинки карты\n * @param {Object} extraData Дополнительные данные\n */\nfunction onDeleteCardAPI(result, data, extraData) {\n  if (result) removeCard(extraData.elementPlace);\n  else showMessage('Ошибка при загрузке', data['error'], 'Понятно'); // Ошибка при загрузке\n}\n\n/**\n * Обработка установки/снятия лайка с Карты через API\n *\n * @callback onLikeAPI\n * @param {Boolean} result результат запроса\n * @param {Object} data Данные запроса\n * @param {String} data.error Ошибка при result = false\n * @param {String} data.name Имя карты\n * @param {String} data.link URL картинки карты\n * @param {Array} data.likes Лайки на карте\n * @param {Object} extraData Дополнительные данные\n * @param {HTMLElement} extraData.element Кнопка лайка\n * */\nfunction onLikeAPI(result, data, extraData) {\n  if (result) {\n    // Количество лайков\n    extraData.elementLike.parentElement.querySelector(settings.classLikesCount)\n      .textContent = data['likes'].length.toString();\n    likeCard (extraData.elementLike, settings);\n    initialLike(extraData.elementCard, data, settings);\n    //console.log(data, extraData);\n  }\n  else showMessage('Ошибка при загрузке', data['error'], 'Понятно'); // Ошибка при загрузке\n}\n\n/**\n * Обработка обновления аватара через API\n *\n * @callback onEditAvatarAPI\n * @param {Boolean} result результат запроса\n * @param {Object} data Данные запроса\n * @param {String} data.error Ошибка при result = false\n * @param {String} data.name Имя карты\n * @param {String} data.link URL картинки карты\n * @param {Array} data.likes Лайки на карте\n * */\nfunction onEditAvatarAPI(result, data) {\n  if (result) editProfile(data, result, settings.bindProfile);\n  else showMessage('Ошибка при загрузке', data['error'], 'Понятно'); // Ошибка при загрузке\n}\n\n// Стартуем\n/**\n * callback'и для окна \"Редактировать профиль\"\n *\n * @type {object} callback'и для окна \"Редактировать профиль\"\n */\nconst objListener = {\n  close: closeWindow,\n  closeUp: closeWindowMouseUp,\n};\n/**\n * Параметры для создания карт\n *\n * @type {object} callback'и для окна \"Редактировать профиль\"\n */\nconst objParam = {\n  cardTemplate,\n  placesContainer,\n  onOpenPreview,\n  onDeleteCard,\n  onLikeCard,\n};\n\n// 1. Загрузки через API\n//    а. Профиль и карты\ngetProfileAndCard(onLoadAndSetProfileAPI, onLoadCardsAPI, settings);\n\n// 2. Инициализация модальных окон\n//    а. Окно \"Редактировать профиль\"\n// Обработка результатов формы\nformProfile.addEventListener(\"submit\", submitProfile);\n\nsetModalWindowEventListeners(windowProfile, settings, objListener);\n\n//    б. Окно \"Добавить карту\"\n// Обработка результатов формы\nformCard.addEventListener(\"submit\", submitCard);\n\nsetModalWindowEventListeners(windowCard, settings, objListener);\n\n//    в. Окно \"Показ картинки\"\nsetModalWindowEventListeners(windowImage, settings, objListener);\n\n//    г. Окно \"Обновить аватар\"\n// Обработка результатов формы\nformAvatar.addEventListener(\"submit\", submitAvatar);\n\nsetModalWindowEventListeners(windowAvatar, settings, objListener);\n\n//    д. Окно \"Всякие сообщения\"\n// Обработка результатов формы\nbuttonMessage.addEventListener('click', clickMessageButton);\n\nsetModalWindowEventListeners(windowMessage, settings, objListener);\n\n// 3. Инициализация валидации\nenableValidation(settings);\n"],"names":["settings","idTemplate","classPlacesList","classPlacesItem","classCardImage","classCardTitle","classCardDeleteButton","classListItem","classWindowPopup","classWindowOpen","classWindowOpenNotDot","classWindowAnimatedNotDot","classElementClose","classForm","classInput","classSubmitButton","classSubmitLabel","classSpinner","classSpinnerVisible","keysClose","classButtonEditAvatar","classWindowEditAvatar","bindAvatar","name","nameForm","classButtonEditProfile","classWindowEditProfile","bindProfile","classPage","nameAPI","typeElement","classButtonAddCard","classWindowAddCard","bindCard","classWindowViewImage","classViewImage","classViewCaption","classWindowMessage","classCaptionMessage","classTextMessage","classMarkerCall","classLikeButton","classLikeYesNotDot","classLikesCount","classLikesTooltip","classItemTooltip","classTitleTooltip","classImageTooltip","classTextTooltip","countLikeInTooltip","classErrorValidation","classValidationContainer","classButtonInActive","apiIdUser","apiURL","apiIdGroup","apiToken","methodProfile","methodCard","methodLike","methodAvatar","initialLike","elementPlace","objectPlace","likesCount","likes","length","querySelector","textContent","toString","likesTooltip","child","lastElementChild","removeChild","listItem","document","createElement","classList","add","addLike","overLike","forEach","like","imageAvatar","setAttribute","avatar","append","spanName","concat","prepend","initPlaces","initCards","addToBegin","_ref","arguments","undefined","cardTemplate","placesContainer","onOpenPreview","objFunction","onDeleteCard","onLikeCard","item","newPlace","objectFunctions","cloneNode","cardImage","link","addEventListener","event","elementCardDeleteButton","owner","remove","createCard","setModalWindowEventListeners","elementWindow","objListener","close","closeUp","showPopup","functionCloseKey","closePopup","removeEventListener","clearValidation","elementForm","elementButton","listInput","Array","from","querySelectorAll","elementInput","hideInputError","toggleStateButton","containerError","id","buttonSetState","some","validity","valid","hasInvalidForm","disabled","callingAPI","promises","callbacks","extraData","Promise","all","then","res","response","index","json","data","ok","error","status","message","reject","catch","err","buildPromiseCall","params","url","nameMethod","options","method","headers","authorization","body","JSON","stringify","fetch","deleteCard","onDeleteCardAPI","content","windowAvatar","formAvatar","buttonAvatar","windowProfile","formProfile","buttonProfile","windowCard","formCard","buttonCard","windowImage","viewImage","windowMessage","captionMessage","textMessage","buttonMessage","findForm","form","getAttribute","clearForm","forms","reset","editProfile","result","bindFields","element","htmlElement","value","closeWindow","closeWindowKey","findIndex","key","verifyEventKeyDown","textElement","elements","dataToMessage","functionCall","callback","showMessage","titleMessage","textLabel","textButton","onLoadAndSetProfileAPI","onAddCardAPI","objParam","createNewCard","cardDelete","onLikeAPI","elementLike","parentElement","toggle","likeCard","elementCard","onEditAvatarAPI","target","closest","verifyEventMouseUp","elementImages","placeCurrent","initImage","idCard","contains","onDeleteLikeAPI","deleteLike","onSetLikeAPI","setLike","onLoadCardsAPI","getProfileAndCard","preventDefault","buttonSubmit","onSetProfileAPI","promiseAll","about","setProfile","onSetCardAPI","setCard","updateAvatar","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","enableValidation"],"sourceRoot":""}