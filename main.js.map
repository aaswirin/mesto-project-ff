{"version":3,"file":"main.js","mappings":"mBAMO,IAAMA,EAAW,CACtBC,WAAY,iBACZC,gBAAiB,gBACjBC,gBAAiB,gBACjBC,eAAgB,eAChBC,eAAgB,eAChBC,sBAAuB,uBACvBC,cAAe,kBAEfC,iBAAkB,kBAClBC,gBAAiB,mBACjBC,sBAAuB,kBACvBC,0BAA2B,oBAC3BC,kBAAmB,gBACnBC,UAAW,eACXC,WAAY,gBACZC,kBAAmB,iBACnBC,iBAAkB,uBAClBC,aAAc,kBACdC,oBAAqB,yBACrBC,cAAe,oBACfC,kBAAmB,wBACnBC,mBAAoB,0BACpBC,qBAAsB,4BACtBC,iBAAkB,GAClBC,UAAW,CACT,UAIFC,sBAAuB,kBACvBC,sBAAuB,qBACvBC,WAAY,CACV,CACEC,KAAM,OACNC,SAAU,gBAIdC,uBAAwB,wBACxBC,uBAAwB,mBACxBC,YAAa,CACX,CACEC,UAAW,kBACXC,QAAS,OACTL,SAAU,OACVM,YAAa,QAEf,CACEF,UAAW,wBACXC,QAAS,QACTL,SAAU,cACVM,YAAa,QAEf,CACEF,UAAW,kBACXC,QAAS,SACTL,SAAU,GACVM,YAAa,UAIjBC,mBAAoB,uBACpBC,mBAAoB,uBACpBC,SAAU,CACR,CACEV,KAAM,OACNC,SAAU,cAEZ,CACED,KAAM,OACNC,SAAU,SAIdU,qBAAsB,oBACtBC,eAAgB,gBAChBC,iBAAkB,kBAElBC,mBAAoB,iBACpBC,oBAAqB,gBACrBC,iBAAkB,eAClBC,gBAAiB,sBAEjBC,gBAAiB,qBACjBC,mBAAoB,8BACpBC,gBAAiB,qBACjBC,kBAAmB,iBACnBC,iBAAkB,qBAClBC,kBAAmB,sBACnBC,kBAAmB,sBACnBC,iBAAkB,qBAClBC,mBAAoB,4BACpBC,mBAAoB,EAEpBC,qBAAsB,qBACtBC,yBAA0B,sCAC1BC,oBAAqB,yBAErBC,UAAW,GACXC,OAAQ,+BACRC,WAAY,gBACZC,SAAU,uCACVC,cAAe,WACfC,WAAY,QACZC,WAAY,cACZC,aAAc,mBClDhB,SAASC,EAAYC,EAAcC,EAAarE,GAE9C,IAAMsE,EAAaD,EAAYE,MAAMC,OACrCJ,EAAaK,cAAczE,EAASgD,iBAAiB0B,YAAcJ,EAAWK,WAM9E,IAHA,IAAMC,EAAeR,EAAaK,cAAczE,EAASiD,mBAErD4B,EAAQD,EAAaE,iBAClBD,GACLD,EAAaG,YAAYF,GACzBA,EAAQD,EAAaE,iBAIvB,IAAIE,EAAWC,SAASC,cAAc,MACtCF,EAASG,UAAUC,IAAIpF,EAASmD,mBAChC6B,EAASN,YAAc,YACvBE,EAAaS,OAAOL,IACpBA,EAAWC,SAASC,cAAc,OACzBC,UAAUC,IAAIpF,EAASkD,iBAAkBlD,EAASsD,oBAE3D,IAAMgC,EAAcL,SAASC,cAAc,OAC3CI,EAAYH,UAAUC,IAAIpF,EAASoD,mBACnCkC,EAAYC,aAAa,MAAOlB,EAAYmB,MAAMC,QAClDH,EAAYC,aAAa,MAAO,mBAAFG,OAAqBrB,EAAYmB,MAAM5D,OACrEoD,EAASK,OAAOC,GAEhB,IAAMK,EAAWV,SAASC,cAAc,QACxCS,EAASR,UAAUC,IAAIpF,EAASqD,kBAChCsC,EAASjB,YAAcL,EAAYmB,MAAM5D,KACzCoD,EAASO,aAAa,gBAAiB,QACvCP,EAASK,OAAOM,GAEhBf,EAAaS,OAAOL,GAGpB,IAAMY,EAAgBX,SAASC,cAAc,MAE7C,GADAU,EAAcT,UAAUC,IAAIpF,EAASmD,mBAClB,IAAfmB,EACFsB,EAAclB,YAAc,qBAE5BE,EAAaS,OAAOO,OACf,CACLA,EAAclB,YAAc,qBAE5BE,EAAaS,OAAOO,GACpB,IAAIC,EAAU,EACVC,EAAW,EA4Bf,GA3BAzB,EAAYE,MAAMwB,SAAQ,SAACC,GAMzB,GALAH,IAEIG,EAAU,MAAMhG,EAAS2D,WAC3BS,EAAaK,cAAczE,EAAS8C,iBAAiBqC,UAAUC,IAAIpF,EAAS+C,oBAE1E8C,GAAW7F,EAASuD,mBAAoB,CAE1C,IAAMyB,EAAWC,SAASC,cAAc,MACxCF,EAASG,UAAUC,IAAIpF,EAASkD,kBAEhC,IAAMoC,EAAcL,SAASC,cAAc,OAC3CI,EAAYH,UAAUC,IAAIpF,EAASoD,mBACnCkC,EAAYC,aAAa,MAAOS,EAAKP,QACrCH,EAAYC,aAAa,MAAO,mBAAFG,OAAqBM,EAAKpE,OACxDoD,EAASK,OAAOC,GAEhB,IAAMK,EAAWV,SAASC,cAAc,QACxCS,EAASR,UAAUC,IAAIpF,EAASqD,kBAChCsC,EAASjB,YAAcsB,EAAKpE,KAC5BoD,EAASK,OAAOM,GAEhBf,EAAaS,OAAOL,EACtB,MACEc,GAEJ,IACiB,IAAbA,EAAgB,CAClB,IAAMd,EAAWC,SAASC,cAAc,MAExCF,EAASN,YAAc,YAAHgB,OAAeI,GACnClB,EAAaS,OAAOL,EACtB,CACF,CACF,CAaO,SAASiB,EAAWC,EAAOC,EAAQC,EAAiBpG,GACzD,GAAqB,OAAjBkG,EAAMG,OAAV,CAEA,IAQIC,EAAaC,EARXC,EAAcN,EAAMG,OAAOI,QAAQzG,EAASG,iBAC5CuG,EAAcR,EAAMG,OACpBM,EAAO,CACXC,GAAIT,EACJK,YAAAA,EACAE,YAAAA,GAIER,EAAMG,OAAOlB,UAAU0B,SAAS7G,EAAS+C,qBAC3CuD,EAAcF,EAAgBU,WAAWH,EAAM3G,GAC/CuG,EAAO,WAEPD,EAAcF,EAAgBW,QAAQJ,EAAM3G,GAC5CuG,EAAO,aAGTD,EACGU,MAAK,SAACC,GAEL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,cAAD3B,OAAea,EAAI,aAAAb,OAAYuB,EAASK,OAAM,MAAA5B,OAAKuB,EAASM,YACnF,IACCP,MAAK,SAACQ,GAELd,EAAYe,cAAchD,cAAczE,EAASgD,iBAC9C0B,YAAc8C,EAAe,MAAEhD,OAAOG,WA2B/C,SAAmB+B,EAAa1G,GAC9B0G,EAAYvB,UAAUuC,OAAO1H,EAAS+C,mBACxC,CA5BM4E,CAAUjB,EAAa1G,GACvBmE,EAAYqC,EAAagB,EAASxH,EACpC,IACC4H,OAAM,SAACC,GACNzB,EAAgB0B,YAAY,cAADpC,OAAea,EAAI,UAAUsB,EAAO,UACjE,GApC+B,CAqCnC,CASO,SAASE,EAAWpB,GACC,OAAtBA,EAAKvC,cAETuC,EAAKvC,aAAa4D,QACpB,CC1KO,SAASC,EAA6BC,EAAelI,EAAUmI,GAEpED,EAAc/C,UAAUC,IAAIpF,EAASW,2BAErCuH,EAAczD,cAAczE,EAASY,mBAClCwH,iBAAiB,SAAU,kBAAMD,EAAYE,MAAMH,EAAeC,EAAYE,MAAM,IAEvFH,EACGE,iBAAiB,WAAW,SAAAlC,GAAK,OAAIiC,EAAYG,QAAQpC,EAAOgC,EAAeC,EAAYG,QAAQ,IAEtG,IAAMC,EAAkBL,EAAczD,cAAczE,EAASmB,eACrC,OAApBoH,GACFA,EAAgB9D,cAAczE,EAASqB,oBAAoB+G,iBAAiB,SAAS,WACnFG,EAAgBpD,UAAU6C,OAAOhI,EAASoB,kBAC5C,GAEJ,CASO,SAASoH,EAAUN,EAAelI,EAAUyI,GAEjDP,EAAc/C,UAAUC,IAAIpF,EAASU,uBAErCuE,SAASmD,iBAAiB,UAAWK,EACvC,CASO,SAASC,EAAWR,EAAelI,EAASyI,GAEjDP,EAAc/C,UAAU6C,OAAOhI,EAASU,uBAExCuE,SAAS0D,oBAAoB,UAAWF,EAC1C,CC1DO,SAASG,EAAgBC,EAAaC,EAAe9I,GAE1D,IAAM+I,EAAYC,MAAMC,KAAKJ,EAAYK,iBAAiBlJ,EAASc,aAEnEiI,EAAUhD,SAAQ,SAACoD,GACjBC,EAAeD,EAAcnJ,EAAW,IAG1CqJ,EAAkBN,EAAWD,EAAe9I,GAE5C8I,EAAcrE,cAAczE,EAASgB,kBAAkB0D,YAAc,YACrEoE,EAAcrE,cAAczE,EAASiB,cAAckE,UAAU6C,OAAOhI,EAASkB,oBAC/E,CAkEA,SAASkI,EAAeD,EAAcnJ,GACpC,IAAMsJ,EAAiBrE,SAASR,cAAc,uBAADiB,OAAwByD,EAAavC,KAClFuC,EAAahE,UAAU6C,OAAOhI,EAASwD,sBACvC8F,EAAe5E,YAAc,GAC7B4E,EAAenE,UAAU6C,OAAOhI,EAASyD,yBAC3C,CAqBA,SAAS4F,EAAkBN,EAAWD,EAAe9I,GACnDuJ,EAAeT,EAfjB,SAAwBC,GAEtB,OAAOA,EAAUS,MAAK,SAACL,GACrB,OAAQA,EAAaM,SAASC,KAChC,GACF,CAUgCC,CAAeZ,GAAY/I,EAC3D,CASO,SAASuJ,EAAeT,EAAec,EAAU5J,GACtD8I,EAAcc,SAAWA,EACrBA,EAAWd,EAAc3D,UAAUC,IAAIpF,EAAS0D,qBAC/CoF,EAAc3D,UAAU6C,OAAOhI,EAAS0D,oBAC/C,CCjIA,SAASmG,EAAaC,EAAQ9J,GAC5B,IAAI+J,EAAM,GAAHrE,OAAM1F,EAAS4D,QAAM8B,OAAG1F,EAAS6D,WAAU,KAAA6B,OAAIoE,EAAOE,YAEvDC,EAAU,CACZC,OAAQJ,EAAOI,OACfC,QAAS,CACPC,cAAepK,EAAS8D,WAY9B,OARkB,OAAdgG,EAAOlD,KACTmD,GAAY,IAAHrE,OAAOoE,EAAOlD,KAEL,OAAhBkD,EAAOO,OACTJ,EAAQE,QAAQ,gBAAkB,mBAClCF,EAAQI,KAAOC,KAAKC,UAAUT,EAAOO,OAGhCG,MAAMT,EAAKE,EACpB,CA0EO,SAASQ,EAAW9D,EAAM3G,GAC/B,OAAQ6J,EAAa,CACnBG,WAAYhK,EAASgE,WACrBkG,OAAQ,SACRG,KAAM,KACNzD,GAAID,EAAKC,IAEX5G,EACF,CAUO,SAAS+G,EAAQJ,EAAM3G,GAC5B,OAAO6J,EAAa,CAClBG,WAAYhK,EAASiE,WACrBiG,OAAQ,MACRG,KAAM,KACNzD,GAAID,EAAKC,IAEX5G,EACF,CAUO,SAAS8G,EAAWH,EAAM3G,GAC/B,OAAO6J,EAAa,CAClBG,WAAYhK,EAASiE,WACrBiG,OAAQ,SACRG,KAAM,KAAMzD,GAAID,EAAKC,IAEvB5G,EACF,CCrIA,IAAM0K,EAAezF,SAASR,cAAczE,EAASC,YAAY0K,QAG3DC,EAAkB3F,SAASR,cAAczE,EAASE,iBAElD2K,EAAe5F,SAASR,cAAczE,EAAS0B,uBAC/CoJ,EAAaD,EAAapG,cAAczE,EAASa,WACjDkK,EAAeD,EAAWrG,cAAczE,EAASe,mBAEjDiK,EAAgB/F,SAASR,cAAczE,EAAS+B,wBAChDkJ,EAAcD,EAAcvG,cAAczE,EAASa,WACnDqK,EAAgBD,EAAYxG,cAAczE,EAASe,mBAEnDoK,EAAalG,SAASR,cAAczE,EAASqC,oBAC7C+I,EAAWD,EAAW1G,cAAczE,EAASa,WAC7CwK,EAAaD,EAAS3G,cAAczE,EAASe,mBAE7CuK,EAAcrG,SAASR,cAAczE,EAASuC,sBAC9CgJ,EAAWD,EAAY7G,cAAczE,EAASwC,gBAE9CgJ,EAAgBvG,SAASR,cAAczE,EAAS0C,oBAChD+I,EAAgBD,EAAc/G,cAAczE,EAAS2C,qBACrD+I,EAAaF,EAAc/G,cAAczE,EAAS4C,kBAClD+I,EAAgBH,EAAc/G,cAAczE,EAASe,mBAsB3D,SAAS6K,EAAS1D,GAChB,IAAM2D,EAAO3D,EAAczD,cAAczE,EAASa,WAClD,OAAa,OAATgL,EAAsB,GAEnBA,EAAKC,aAAa,OAC3B,CA8CA,SAASC,EAAU7D,GACjB,IAAMrG,EAAW+J,EAAS1D,GAC1B,GAAiB,KAAbrG,EAAJ,CAGAoD,SAAS+G,MAAMnK,GAAUoK,QAGzB,IAAM1D,EAAkBL,EAAczD,cAAczE,EAASmB,eACrC,OAApBoH,GACF2D,EAAa3D,EARY,CAU7B,CAWA,SAAS4D,EAAYxF,EAAMyF,GAEzBA,EAAWrG,SAAQ,SAAUsG,GAC3B,IAAMC,EAAcrH,SAASR,cAAc4H,EAAQpK,WACnD,GAAoB,OAAhBqK,EAAJ,CAEA,IAAMC,EAAQ5F,EAAK0F,EAAQnK,SAEC,SAAxBmK,EAAQlK,YAAwBmK,EAAY5H,YAAc6H,EAC7B,UAAxBF,EAAQlK,aACfmK,EAAY/G,aAAa,QAAS,yBAAFG,OAA2B6G,EAAK,MANlC,CAQlC,GACF,CAyBA,SAASC,EAAatE,EAAeL,GACnC,IAAMU,EAAkBL,EAAczD,cAAczE,EAASmB,eAC7DoH,EAAgBpD,UAAUC,IAAIpF,EAASoB,mBACvC8G,EAAczD,cAAczE,EAASsB,sBAAsBoD,YAAcmD,EAEzE4E,YAAW,WACTP,EAAa3D,EACf,GAA+B,IAA5BvI,EAASuB,iBACd,CAOA,SAAS2K,EAAa3D,GACpBA,EAAgBpD,UAAU6C,OAAOhI,EAASoB,kBAC5C,CAYA,SAASsL,EAAYxE,EAAeO,GAClCC,EAAWR,EAAelI,EAAUyI,GAEhCP,IAAkBsD,GAAeG,EAAcxG,UAAU6C,OAAOhI,EAAS6C,iBAG7EkJ,EAAU7D,EACZ,CAkBA,SAASyE,EAAezG,GACtB,GH/MK,SAA4BA,EAAOlG,GAExC,OAEQ,IAFDA,EAASwB,UAAUoL,WAAU,SAAUP,GAC5C,OAAOA,IAAYnG,EAAM2G,GAC3B,GACF,CG0MOC,CAAmB5G,EAAOlG,GAA/B,CAGA,IAAMkI,EAAgBjD,SAASR,cAAczE,EAASS,iBAChC,OAAlByH,GAAwBwE,EAAYxE,EAAeyE,EAJP,CAKlD,CA/LA1H,SAASR,cAAczE,EAASyB,uBAAuB2G,iBAAiB,SAoMxE,WACEQ,EAAgBkC,EAAYC,EAAc/K,GAE1CuJ,EAAewB,GAAc,EAAM/K,GAEnCwI,EAAUqC,EAAc7K,EAAU2M,EACpC,IAvMA1H,SAASR,cAAczE,EAAS8B,wBAAwBsG,iBAAiB,SAuPzE,WAxNA,IAAmBF,EAAekE,EAC1BvK,EADWqG,EA0NP8C,EA1NsBoB,EA0NPpM,EAASgC,YAxNjB,MADXH,EAAW+J,EAAS1D,KAG1BkE,EAAWrG,SAAQ,SAAUsG,GAC3B,GAAyB,KAArBA,EAAQxK,SAAZ,CACA,IAAMkL,EAAc9H,SAASR,cAAc4H,EAAQpK,WAC/B,OAAhB8K,IAEJ9H,SAAS+G,MAAMnK,GAAUmL,SAASX,EAAQxK,UAAU0K,MAAQQ,EAAYrI,YAJrC,CAKrC,IAkNAkE,EAAgBoC,EAAeE,EAAelL,GAC9CuJ,EAAe2B,GAAe,EAAOlL,GAErCwI,EAAUwC,EAAehL,EAAU2M,EACrC,IA5PA1H,SAASR,cAAczE,EAASoC,oBAAoBgG,iBAAiB,SAgTrE,WACEQ,EAAgBwC,EAAUC,EAAYrL,GAEtCuJ,EAAe8B,GAAY,EAAMrL,GAEjCwI,EAAU2C,EAAYnL,EAAU2M,EAClC,IAmDA,IAAMM,EAAgB,CACpBC,aAAc,KACdC,SAAU,KACVxG,KAAM,CAAC,GAUT,SAASyG,EAAahJ,EAAc+B,GAElC8G,EAAcC,aAAezC,EAC7BwC,EAAcE,SAAWpF,EACzBkF,EAAcI,aAAe,4BAC7BJ,EAActG,KAAKC,GAAKT,EACxB8G,EAActG,KAAKvC,aAAeA,EAClCuH,EAAcxG,UAAUC,IAAIpF,EAAS6C,iBAGrCiF,EAAY,cAAe,GAAI,KACjC,CAQA,SAASwF,EAAcpH,IA1VvB,SAAmBgC,EAAeqF,GAEhChC,EAAUhG,aAAa,MAAOgI,EAAczB,aAAa,QACzDP,EAAUhG,aAAa,MAAOgI,EAAczB,aAAa,QAGzD,IAAM0B,EAAeD,EAAc9G,QAAQzG,EAASO,eAC/B,OAAjBiN,IAEJtF,EAAczD,cAAczE,EAASyC,kBAAkBiC,YAAc8I,EAAa/I,cAAczE,EAASK,gBAAgBqE,YAC3H,CAkVE+I,CAAUnC,EAAapF,EAAMG,QAE7BmC,EAAU8C,EAAatL,EAAU2M,EACnC,CASA,SAAS7E,EAAY4F,EAAcC,EAAWC,GAC5CnC,EAAe/G,YAAcgJ,EAC7BhC,EAAYhH,YAAciJ,EAC1BhC,EAAcjH,YAAckJ,EAE5BpF,EAAUgD,EAAexL,EAAU2M,EACrC,CAoCA,SAASkB,EAAWC,EAAWC,GAC7B,IAAMC,EAAc,CAClBZ,aAAAA,EACAE,cAAAA,EACArH,WAAAA,EACAa,WAAAA,EACAC,QAAAA,EACAe,YAAAA,GAEFgG,EAAU/H,SAAQ,SAAUkI,GAC1B,IAAIC,EJpeD,SAAoB7J,EAAaqG,EAAc1K,EAClCoG,GAClB,IAAM8H,EAAWxD,EAAajG,cAAczE,EAASG,iBAAiBgO,WAAU,GAG1EC,EAAYF,EAASzJ,cAAczE,EAASI,gBAClDgO,EAAU7I,aAAa,MAAOlB,EAAYgK,MAC1CD,EAAU7I,aAAa,MAAO,sBAAwBlB,EAAYzC,MAElEwM,EAAUhG,iBAAiB,SAAS,SAAAlC,GAAK,OAAIE,EAAgBkH,cAAcpH,EAAM,IAEjFgI,EAASzJ,cAAczE,EAASK,gBAAgBqE,YAAcL,EAAYzC,KAE1E,IAAM0M,EAA0BJ,EAASzJ,cAAczE,EAASM,uBAYhE,OAXI+D,EAAYmB,MAAW,MAAMxF,EAAS2D,UACxC2K,EAAwBlG,iBAAiB,SAAS,kBAAMhC,EAAgBgH,aAAac,EAAU7J,EAAiB,IAAE,IAElHiK,EAAwBtG,SAG1BkG,EAASzJ,cAAczE,EAAS8C,iBAC7BsF,iBAAiB,SAAS,SAAAlC,GAAK,OAAIE,EAAgBH,WAAWC,EAAO7B,EAAiB,IAAG+B,EAAiBpG,EAAS,IAGtHmE,EAAY+J,EAAU7J,EAAarE,GAC5BkO,CACT,CI0cmBK,CAAWN,EAAMvD,EAAc1K,EAAUgO,GACpDD,EAAYnD,EAAgB4D,QAAQN,GACnCtD,EAAgBvF,OAAO6I,EAC9B,GACF,CAQA,IAAM/F,EAAc,CAClBE,MAAOqE,EACPpE,QA/SF,SAA4BpC,EAAOgC,EAAeO,IHjN3C,SAA4BvC,EAAOlG,GAExC,OAA2D,OAApDkG,EAAMG,OAAOI,QAAQzG,EAASQ,iBACvC,EG+MMiO,CAAmBvI,EAAOlG,IAAW0M,EAAYxE,EAAeO,EACtE,IDpLO,SAA2BzI,GAChC,OAAOoH,QAAQsH,IACf,CAAC7E,EAAa,CACHG,WAAYhK,EAAS+D,cACrBmG,OAAQ,MACRG,KAAM,KACNzD,GAAI,MAEN5G,GACF6J,EAAa,CACTG,WAAYhK,EAASgE,WACrBkG,OAAQ,MACRG,KAAM,KACNzD,GAAI,MAEN5G,IAEX,ECqdA2O,CAAkB3O,GACfgH,MAAK,SAAC4H,GAEL,IAAMA,EAAU,GAAG1H,KAAS0H,EAAU,GAAG1H,GAAK,CAC5C,IAAI2H,EAGEtI,EAAuB,IADxBsI,EADAD,EAAU,GAAG1H,GACC,EADiB,GAEH,UAAY,OAE7C,OAAOE,QAAQC,OAAO,uBAAD3B,OAAwBa,EAAI,OAAAb,OAAMkJ,EAAUC,GAAavH,OAAM,MAAA5B,OAAKkJ,EAAUC,GAAatH,YAClH,CACA,OAAOqH,CACT,IACC5H,MAAK,SAAC4H,GACL,OAAOxH,QAAQsH,IAAIE,EAAUE,KAAI,SAAAC,GAAC,OAAIA,EAAE5H,MAAM,IAChD,IACCH,MAAK,SAACgI,GAELhP,EAAS2D,UAAYqL,EAAS,GAAQ,IACtC7C,EAAY6C,EAAS,GAAIhP,EAASgC,aAElC6L,EAAWmB,EAAS,IAAI,EAC1B,IACCpH,OAAM,SAACC,GACNC,EAAY,sBAAuBD,EAAO,UAC5C,IAKFoD,EAAY7C,iBAAiB,UAzP7B,SAAuBlC,GACrBA,EAAM+I,iBAGN,IAAMpN,EAAW+J,EAASZ,GAC1B,GAAiB,KAAbnJ,EAAJ,CAGA,IAAM8E,EAAO,CAAC,EACd3G,EAASgC,YAAY+D,SAAQ,SAAUsG,GAEZ,KAApBA,EAAQnK,SAAyC,KAArBmK,EAAQxK,WACzC8E,EAAK0F,EAAQnK,SAAW+C,SAAS+G,MAAMnK,GAAUmL,SAASX,EAAQxK,UAAU0K,MAC9E,IAEArB,EAAczG,cAAczE,EAASgB,kBAAkB0D,YAAc,gBACrEwG,EAAczG,cAAczE,EAASiB,cAAckE,UAAUC,IAAIpF,EAASkB,qBD/PrE,SAAoByF,EAAM3G,GAC/B,OAAO6J,EAAa,CAChBG,WAAYhK,EAAS+D,cACrBmG,OAAQ,QACRG,KAAM,CAACzI,KAAM+E,EAAK/E,KAAMsN,MAAOvI,EAAKuI,OACpCtI,GAAI,MAEN5G,EACJ,CCwPEmP,CAAWxI,EAAM3G,GACdgH,MAAK,SAACC,GAEL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,+BAAD3B,OAAgCuB,EAASK,OAAM,MAAA5B,OAAKuB,EAASM,YACpF,IACCP,MAAK,SAACQ,GACL2E,EAAY3E,EAASxH,EAASgC,aAE9B0G,EAAWsC,EAAehL,EAAU2M,GAEpCZ,EAAUf,EACZ,IACCpD,OAAM,SAACC,GACN2E,EAAaxB,EAAenD,EAC9B,IACCuH,SAAQ,WACPlE,EAAczG,cAAczE,EAASgB,kBAAkB0D,YAAc,YACrEwG,EAAczG,cAAczE,EAASiB,cAAckE,UAAU6C,OAAOhI,EAASkB,oBAC/E,GAjCyB,CAkC7B,IAoNA+G,EAA6B+C,EAAehL,EAAUmI,GAItDiD,EAAShD,iBAAiB,UArM1B,SAAoBlC,GAClBA,EAAM+I,iBAGN,IAAMpN,EAAW+J,EAAST,GAC1B,GAAiB,KAAbtJ,EAAJ,CAGA,IAAM8E,EAAO,CAAC,EACd3G,EAASsC,SAASyD,SAAQ,SAAUsG,GAClC1F,EAAK0F,EAAQzK,MAAQqD,SAAS+G,MAAMnK,GAAUmL,SAASX,EAAQxK,UAAU0K,KAC3E,IAEAlB,EAAW5G,cAAczE,EAASgB,kBAAkB0D,YAAc,gBAClE2G,EAAW5G,cAAczE,EAASiB,cAAckE,UAAUC,IAAIpF,EAASkB,qBDpSlE,SAAiByF,EAAM3G,GAC5B,OAAO6J,EAAa,CAChBG,WAAYhK,EAASgE,WACrBkG,OAAQ,OACRG,KAAM,CAACzI,KAAM+E,EAAK/E,KAAMyM,KAAM1H,EAAK0H,MACnCzH,GAAI,MAEN5G,EACJ,CC6REqP,CAAQ1I,EAAM3G,GACXgH,MAAK,SAACC,GAEL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,mCAAD3B,OAAoCuB,EAASK,OAAM,MAAA5B,OAAKuB,EAASM,YACxF,IACCP,MAAK,SAACQ,IArOX,SAAuBb,GAGJ,KADAiF,EAAST,IAG1B0C,EAAWlH,GAAM,EACnB,CAiOM2I,CADkB,CAAC9H,IAGnBkB,EAAWyC,EAAYnL,EAAU2M,GAEjCZ,EAAUZ,EACZ,IACCvD,OAAM,SAACC,GACN2E,EAAarB,EAAYtD,EAC3B,IACCuH,SAAQ,WACP/D,EAAW5G,cAAczE,EAASgB,kBAAkB0D,YAAc,YAClE2G,EAAW5G,cAAczE,EAASiB,cAAckE,UAAU6C,OAAOhI,EAASkB,oBAC5E,GAhCyB,CAiC7B,IAiKA+G,EAA6BkD,EAAYnL,EAAUmI,GAGnDF,EAA6BqD,EAAatL,EAAUmI,GAIpD2C,EAAW1C,iBAAiB,UAhU5B,SAAsBlC,GACpBA,EAAM+I,iBAGN,IAAMpN,EAAW+J,EAASf,GAC1B,GAAiB,KAAbhJ,EAAJ,CAGA,IAAM8E,EAAO,CAAC,EACd3G,EAAS2B,WAAWoE,SAAQ,SAAUsG,GACpC1F,EAAK0F,EAAQzK,MAAQqD,SAAS+G,MAAMnK,GAAUmL,SAASX,EAAQxK,UAAU0K,KAC3E,IACAxB,EAAatG,cAAczE,EAASgB,kBAAkB0D,YAAc,gBACpEqG,EAAatG,cAAczE,EAASiB,cAAckE,UAAUC,IAAIpF,EAASkB,qBDxGpE,SAAsByF,EAAM3G,GACjC,OAAO6J,EAAa,CAClBG,WAAYhK,EAASkE,aACrBgG,OAAQ,QACRG,KAAM,CAAC5E,OAAQkB,EAAK0H,MACpBzH,GAAI,MAEN5G,EACF,CCiGEuP,CAAa5I,EAAM3G,GAChBgH,MAAK,SAACC,GAEL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,+BAAD3B,OAAgCuB,EAASK,OAAM,MAAA5B,OAAKuB,EAASM,YACpF,IACCP,MAAK,SAACQ,GACL2E,EAAY3E,EAASxH,EAASgC,aAE9B0G,EAAWmC,EAAc7K,EAAU2M,GAEnCZ,EAAUlB,EACZ,IACCjD,OAAM,SAACC,GACN2E,EAAa3B,EAAchD,EAC7B,IACCuH,SAAQ,WACPrE,EAAatG,cAAczE,EAASgB,kBAAkB0D,YAAc,YACpEqG,EAAatG,cAAczE,EAASiB,cAAckE,UAAU6C,OAAOhI,EAASkB,oBAC9E,GA9ByB,CA+B7B,IA8RA+G,EAA6B4C,EAAc7K,EAAUmI,GAIrDwD,EAAcvD,iBAAiB,SA9G/B,WAEMuD,EAAcxG,UAAU0B,SAAS7G,EAAS6C,kBAC5CoK,EAAcC,aAAaD,EAActG,KAAM3G,GAC5CgH,MAAK,SAACC,GAEL,IAAIA,EAASC,GAIb,OAAOE,QAAQC,OAAO,GAAD3B,OAAIuH,EAAcI,aAAY,OAAA3H,OAAMuB,EAASK,OAAM,MAAA5B,OAAKuB,EAASM,aAHpF0F,EAAcE,SAASF,EAActG,KAIzC,IACCiB,OAAM,SAACC,GACNC,EAAYmF,EAAcI,aAAcxF,EAAO,UACjD,IAGJ6E,EAAYlB,EAAemB,EAC7B,IA8FA1E,EAA6BuD,EAAexL,EAAUmI,GF5jB/C,SAA0BnI,GAEdgJ,MAAMC,KAAKhE,SAASiE,iBAAiBlJ,EAASa,YAEtDkF,SAAQ,SAAC8C,GAChB,IAAMC,EAAgBD,EAAYpE,cAAczE,EAASe,oBAgC7D,SAA2B8H,EAAaC,EAAe9I,GAErD,IAAM+I,EAAYC,MAAMC,KAAKJ,EAAYK,iBAAiBlJ,EAASc,aAEnEiI,EAAUhD,SAAQ,SAACoD,GACjBA,EAAaf,iBAAiB,SAAS,YAe3C,SAAiBS,EAAaM,EAAcJ,EAAWD,EAAe9I,GAChEmJ,EAAaM,SAAS+F,gBACxBrG,EAAasG,kBAAkBtG,EAAauG,QAAQC,cAEpDxG,EAAasG,kBAAkB,IAG5BtG,EAAaM,SAASC,MAGzBN,EAAeD,EAAcnJ,GAcjC,SAAwBmJ,EAAcwG,EAAc3P,GAClD,IAAMsJ,EAAiBrE,SAASR,cAAc,uBAADiB,OAAwByD,EAAavC,KAClFuC,EAAahE,UAAUC,IAAIpF,EAASwD,sBAEpC8F,EAAe5E,YAAciL,EAC7BrG,EAAenE,UAAUC,IAAIpF,EAASyD,yBACxC,CAtBImM,CAAezG,EAAcA,EAAa0G,kBAAmB7P,GAM/DqJ,EAAkBN,EAAWD,EAAe9I,EAC9C,CA7BM8P,CAAQjH,EAAaM,EAAcJ,EAAWD,EAAe9I,EAC/D,GACF,GACF,CAxCI+P,CAAkBlH,EAAaC,EAAe9I,EAChD,GACF,CEujBAgQ,CAAiBhQ,E","sources":["webpack://mesto-project-ff/./src/components/settings.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["/**\n * Настройки для разметки и прочая, и прочая...\n * При изменении разметки править здесь\n *\n * @type {object} Настройки\n */\nexport const settings = {\n  idTemplate: \"#card-template\",                     // Id template'а для карт\n  classPlacesList: '.places__list',                 // Класс места для укладки карт\n  classPlacesItem: '.places__item',                 // Класс для карты\n  classCardImage: '.card__image',                   // Класс для картинки карты\n  classCardTitle: '.card__title',                   // Класс для подписи карты\n  classCardDeleteButton: '.card__delete-button',    // Класс для кнопки удаления карты\n  classListItem: 'li.places__item',                 // Тэг и Класс места для укладки карт\n  // Для окон\n  classWindowPopup: '.popup__content',               // Класс для содержимого окон\n  classWindowOpen: '.popup_is-opened',               // Класс для показа окна\n  classWindowOpenNotDot: 'popup_is-opened',          // Класс для показа окна (без точки)\n  classWindowAnimatedNotDot: 'popup_is-animated',    // Класс для анимации\n  classElementClose: '.popup__close',                // Класс для кнопки закрытия окна\n  classForm: '.popup__form',                         // Класс формы\n  classInput: '.popup__input',                       // Класс поля ввода\n  classSubmitButton: '.popup__button',               // Класс кнопки на форме\n  classSubmitLabel: '.popup__button-label',          // Класс подписи кнопки на форме\n  classSpinner: '.popup__spinner',                   // Класс спиннера кнопки на форме\n  classSpinnerVisible: 'popup__spinner-visible',     // Класс включения спиннера кнопки на форме\n  classNetError: '.popup__net-error',                // Класс для сообщения об ошибке сети\n  classNetErrorShow: 'popup__net-error-show',        // Класс для показа сообщения об ошибке сети\n  classNetErrorClose: '.popup__net-error-close',     // Класс для кнопки закрытия сообщения об ошибке сети\n  classNetErrorMessage: '.popup__net-error-message', // Класс для текста сообщения об ошибке сети\n  timeShowNetError: 10,                              // Время показа сетевой ошибки в секундах\n  keysClose: [                                       // Список клавиш, по которым закрываем окно. Вдруг поменяется?\n    'Escape',\n    //'F10',\n  ],\n  // Редактировать аватар\n  classButtonEditAvatar: '.profile__image',          // Класс для кнопки \"Редактировать аватар\"\n  classWindowEditAvatar: '.popup_edit-avatar',       // Класс для окна \"Редактировать профиль\"\n  bindAvatar: [                                      // Связки полей на форме и на странице\n    {\n      name: 'link',\n      nameForm: 'link-avatar',\n    },\n  ],\n  // Редактировать профиль\n  classButtonEditProfile: '.profile__edit-button',   // Класс для кнопки \"Редактировать профиль\"\n  classWindowEditProfile: '.popup_type_edit',        // Класс для окна \"Редактировать профиль\"\n  bindProfile: [                                     // Связки полей на форме и на странице и в API\n    {\n      classPage: '.profile__title',                  // Класс на странице\n      nameAPI: 'name',                               // Имя в API\n      nameForm: 'name',                              // Имя на форме\n      typeElement: 'text',                           // Тип элемента text или image\n    },\n    {\n      classPage: '.profile__description',\n      nameAPI: 'about',\n      nameForm: 'description',\n      typeElement: 'text',\n    },\n    {\n      classPage: '.profile__image',\n      nameAPI: 'avatar',\n      nameForm: '',\n      typeElement: 'image',\n    },\n  ],\n  // Добавить карту\n  classButtonAddCard: '.profile__add-button',        // Класс для кнопки \"Добавить карту\"\n  classWindowAddCard: '.popup_type_new-card',        // Класс для окна \"Добавить карту\"\n  bindCard: [                                        // Связки полей на форме и на странице\n    {\n      name: 'name',                                  // Имя значения объекта для создания карты\n      nameForm: 'place-name',                        // Имя на форме, откуда взять значение\n    },\n    {\n      name: 'link',\n      nameForm: 'link',\n    },\n  ],\n  // Просмотр картинки\n  classWindowViewImage: '.popup_type_image',                       // Класс для окна \"Просмотр картинки\"\n  classViewImage: '.popup__image',                                 // Класс для картинки, которую показываем\n  classViewCaption: '.popup__caption',                             // Подпись под картинкой, которую показываем\n  // Показ сообщения\n  classWindowMessage: '.popup_message',                            // Класс для окна \"Всякие сообщения\"\n  classCaptionMessage: '.popup__title',                            // Класс для заголовка окна \"Всякие сообщения\"\n  classTextMessage: '.popup__text',                                // Класс для текста окна \"Всякие сообщения\"\n  classMarkerCall: '.popup__marker-call',                          // Класс для кнопки окна \"Всякие сообщения\", если нужно что-то выполнить\n  // Лайк карты\n  classLikeButton: '.card__like-button',                           // Класс для кнопки лайка\n  classLikeYesNotDot: 'card__like-button_is-active',               // Класс для установки лайка (без точки)\n  classLikesCount: '.card__likes-count',                           // Класс для количества лайков на карте\n  classLikesTooltip: '.card__tooltip',                             // Класс для списка поставивших лайк\n  classItemTooltip: 'card__tooltip-item',                          // Класс для элемента списка поставивших лайк\n  classTitleTooltip: 'card__tooltip-title',                        // Класс для заголовка списка поставивших лайк\n  classImageTooltip: 'card__tooltip-image',                        // Класс для изображения списка поставивших лайк\n  classTextTooltip: 'card__tooltip-text',                          // Класс для текста списка поставивших лайк\n  classMarginTooltip: 'card__tooltip-item-margin',                 // Класс для отступов\n  countLikeInTooltip: 5,                                           // Количество лайков для показа\n  // Валидация\n  classErrorValidation: 'popup__input-error',                      // Класс для подчёркивания поля ввода при ошибке\n  classValidationContainer: 'popup__input-error-container-active', // Класс для описания ошибки валидации\n  classButtonInActive: 'popup__button-inactive',                   // Класс для неактивной кнопки формы\n  // API\n  apiIdUser: '',                                                   // Здесь будет храниться полученный Id пользователя\n  apiURL: 'https://nomoreparties.co/v1/',                          // Адрес сервера проекта \"Место\"\n  apiIdGroup: 'wff-cohort-35',                                     // Идентификатор группы\n  apiToken: '1e636933-64cf-4fb7-82cc-a4047b92f087',                // Токен\n  methodProfile: 'users/me',                                       // Метод API для профиля\n  methodCard: 'cards',                                             // Метод API для карт\n  methodLike: 'cards/likes',                                       // Метод API для лайков\n  methodAvatar: 'users/me/avatar',                                 // Метод API для обновления аватара\n}\n","/*\n Карты\n */\n\n/**\n * Создание карты\n *\n * @param {Object} objectPlace Место для создания\n * @param {string} objectPlace.name Наименование Места\n * @param {string} objectPlace.link URL картинки\n * @param {string} objectPlace[_id] Id картинки в URL\n * @param {Object} objectPlace.owner Id владельца карты\n * @param {Object[]} objectPlace.likes Массив лайков\n * @param {DocumentFragment} cardTemplate Заготовка\n * @param {Object} settings Настройки\n * @param {Object} objectFunctions callback'и\n * @param {onDeleteCard} objectFunctions.onDeleteCard Функция удаления карты\n * @param {onOpenPreview} objectFunctions.onOpenPreview Функция показа картинки\n * @param {onLikeCard} objectFunctions.onLikeCard Функция лайка\n * @param {deleteLike} objectFunctions.deleteLike Удаление лайка в API\n * @param {setLike} objectFunctions.setLike Установка лайка в API\n * @param {showMessage} objectFunctions.showMessage Показ сообщения об ошибке\n * @returns {HTMLElement} Карточка для размещения на странице\n */\n\nexport function createCard(objectPlace, cardTemplate, settings,\n                    objectFunctions) {\n  const newPlace = cardTemplate.querySelector(settings.classPlacesItem).cloneNode(true);\n\n  // Изображение\n  const cardImage = newPlace.querySelector(settings.classCardImage);\n  cardImage.setAttribute('src', objectPlace.link);\n  cardImage.setAttribute('alt', 'Место на картинке: ' + objectPlace.name);\n  // Показ картинки \"во всей красе\"\n  cardImage.addEventListener('click', event => objectFunctions.onOpenPreview(event));\n  // Подпись\n  newPlace.querySelector(settings.classCardTitle).textContent = objectPlace.name;\n  // Кнопка Удалить\n  const elementCardDeleteButton = newPlace.querySelector(settings.classCardDeleteButton);\n  if (objectPlace.owner['_id'] === settings.apiIdUser) {  // Моя карта, могу и удалить\n    elementCardDeleteButton.addEventListener('click', () => objectFunctions.onDeleteCard(newPlace, objectPlace['_id']));\n  } else {                                                // Чужая карта, удалять ни-ни\n    elementCardDeleteButton.remove();\n  }\n  // Лайк карточки\n  newPlace.querySelector(settings.classLikeButton)\n    .addEventListener('click', event => objectFunctions.onLikeCard(event, objectPlace['_id'], objectFunctions, settings));\n\n  // Обработать лайки\n  initialLike(newPlace, objectPlace, settings);\n  return newPlace;\n}\n\n/**\n * Работа с лайками\n *\n * @param {HTMLElement} elementPlace Карта для загрузки лайков\n * @param {Object} objectPlace Данные карты\n * @param {Object[]} objectPlace.likes Массив лайков\n * @param {Object} objectPlace.owner Владелец карты\n * @param {Object} settings Настройки\n */\nfunction initialLike(elementPlace, objectPlace, settings) {\n  // Количество лайков\n  const likesCount = objectPlace.likes.length;\n  elementPlace.querySelector(settings.classLikesCount).textContent = likesCount.toString();\n\n  // Список тех, кто лайк поставил\n  const likesTooltip = elementPlace.querySelector(settings.classLikesTooltip);\n  // Зачистить предыдущий список\n  let child = likesTooltip.lastElementChild;\n  while (child) {\n    likesTooltip.removeChild(child);\n    child = likesTooltip.lastElementChild;\n  }\n\n  // Владелец\n  let listItem = document.createElement('li');\n  listItem.classList.add(settings.classTitleTooltip);\n  listItem.textContent = 'Владелец:';\n  likesTooltip.append(listItem);\n  listItem = document.createElement('li');\n  listItem.classList.add(settings.classItemTooltip, settings.classMarginTooltip);\n  // Аватар\n  const imageAvatar = document.createElement('img');\n  imageAvatar.classList.add(settings.classImageTooltip);\n  imageAvatar.setAttribute('src', objectPlace.owner.avatar);\n  imageAvatar.setAttribute('alt', `Владелец карты: ${objectPlace.owner.name}`);\n  listItem.append(imageAvatar);\n  // Имя\n  const spanName = document.createElement('span');\n  spanName.classList.add(settings.classTextTooltip);\n  spanName.textContent = objectPlace.owner.name;\n  listItem.setAttribute('margin-bottom', '10px');\n  listItem.append(spanName);\n  // Добавить в список Владельца\n  likesTooltip.append(listItem);\n\n  // Список лайков\n  const listItemTitle = document.createElement('li');\n  listItemTitle.classList.add(settings.classTitleTooltip);\n  if (likesCount === 0) {\n    listItemTitle.textContent = 'Увы, лайков нет...';\n    // Добавить в список заголовок\n    likesTooltip.append(listItemTitle);\n  } else {\n    listItemTitle.textContent = 'Лайки этого места:';\n    // Добавить в список заголовок\n    likesTooltip.append(listItemTitle);\n    let addLike = 0;  // Сколько добавлено\n    let overLike = 0; // Лишние лайки\n    objectPlace.likes.forEach((like) => {\n      addLike++;\n      // Свой лайк не потерять!\n      if (like['_id'] === settings.apiIdUser) {\n        elementPlace.querySelector(settings.classLikeButton).classList.add(settings.classLikeYesNotDot);\n      }\n      if (addLike <= settings.countLikeInTooltip) {  // Можно добавлять\n        // Элемент списка\n        const listItem = document.createElement('li');\n        listItem.classList.add(settings.classItemTooltip);\n        // Аватар\n        const imageAvatar = document.createElement('img');\n        imageAvatar.classList.add(settings.classImageTooltip);\n        imageAvatar.setAttribute('src', like.avatar);\n        imageAvatar.setAttribute('alt', `Установил лайк: ${like.name}`);\n        listItem.append(imageAvatar);\n        // Имя\n        const spanName = document.createElement('span');\n        spanName.classList.add(settings.classTextTooltip);\n        spanName.textContent = like.name;\n        listItem.append(spanName);\n        // Добавить в список лайкнувшего (обожаю русский язык!)\n        likesTooltip.append(listItem);\n      } else {  // Уже лишние\n        overLike++;\n      }\n    })\n    if (overLike !== 0) {\n      const listItem = document.createElement('li');\n      //listItem.classList.add(settings.classTitleTooltip);\n      listItem.textContent = `...и ещё ${overLike}`;\n      likesTooltip.append(listItem);\n    }\n  }\n}\n\n/**\n * Поставить/снять лайк карты\n * @callback onLikeCard\n * @param {Event} event Событие 'click' на кнопке\n * @param {String} idCard Id карты\n * @param {Object} objectFunctions Функции\n * @param {deleteLike} objectFunctions.deleteLike Функция API для удаления лайка\n * @param {setLike} objectFunctions.setLike Функция API для установки лайка\n * @param {showMessage} objectFunctions.showMessage Функция для выдачи сообщения об ошибке\n * @param {Object} settings Настройки\n */\nexport function onLikeCard(event, idCard, objectFunctions, settings) {\n  if (event.target === null) return;\n\n  const elementCard = event.target.closest(settings.classPlacesItem);\n  const elementLike = event.target;\n  const data = {\n    id: idCard,\n    elementCard,\n    elementLike,\n  };\n  // Если лайк есть, то его надо снять, иначе поставить\n  let promiseLike, what;\n  if (event.target.classList.contains(settings.classLikeYesNotDot)) {\n    promiseLike = objectFunctions.deleteLike(data, settings);\n    what = 'снятии';\n  } else {\n    promiseLike = objectFunctions.setLike(data, settings);\n    what = 'установке';\n  }\n\n  promiseLike\n    .then((response) =>{\n      // Не всё так хорошо?\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(`Ошибка при ${what} лайка:  ${response.status}, ${response.statusText}`)\n    })\n    .then((resJSON) => {\n      // Количество лайков\n      elementLike.parentElement.querySelector(settings.classLikesCount)\n        .textContent = resJSON['likes'].length.toString();\n      likeCard (elementLike, settings);\n      initialLike(elementCard, resJSON, settings);\n    })\n    .catch((error) => {\n      objectFunctions.showMessage(`Ошибка при ${what} лайка`, error, 'Понятно');\n    });\n}\n\n\n/**\n * Удаление карты\n *\n * @param {Object} data Общие данные\n * @param {HTMLElement} data.elementPlace Карта для удаления\n */\nexport function removeCard(data) {\n  if (data.elementPlace === null) return;\n\n  data.elementPlace.remove();                 // Можно удалять!\n}\n\n/**\n * Поставить/снять лайк картинки\n * @param {HTMLElement} elementLike Кнопка лайка\n * @param {Object} settings Настройки\n */\nfunction likeCard (elementLike, settings) {\n  elementLike.classList.toggle(settings.classLikeYesNotDot);\n}\n","/*\n Модальные окна\n */\n\n/**\n * Проверка на mouseup вне модальном окне\n *\n * @param {Event} event Событие 'mouseup' на документе\n * @param {Object} settings Настройки\n * @returns {boolean} результат проверки\n */\nexport function verifyEventMouseUp(event, settings) {\n  // На окне клацнули? Если да, то не закрываем!\n  return event.target.closest(settings.classWindowPopup) === null;\n}\n\n/**\n * Проверка нажатой клавиши на модальном окне\n *\n * @param {Event} event Событие 'keydown' на документе\n * @param {Object} settings Настройки\n * @returns {boolean} результат проверки\n */\nexport function verifyEventKeyDown(event, settings) {\n  // Поискать клавишу в списке\n  return settings.keysClose.findIndex(function (element) {\n    return element === event.key;\n  }) !== -1;\n}\n\n/**\n * Инициализация модального окна\n *\n * @param {HTMLElement} elementWindow Окно для поднятия\n * @param {Object} settings Настройки\n * @param {Object} objListener Слушатели\n * @param {function} objListener.close Закрытие по клику\n * @param {function} objListener.closeUp Закрытие по клику вне окна\n */\nexport function setModalWindowEventListeners(elementWindow, settings, objListener) {\n  // Обеспечить анимацию\n  elementWindow.classList.add(settings.classWindowAnimatedNotDot);\n  // Обеспечить закрытие по крестику\n  elementWindow.querySelector(settings.classElementClose)\n    .addEventListener('click',  () => objListener.close(elementWindow, objListener.close));\n  // Для снятия открытого окна по клику вне окна\n  elementWindow\n    .addEventListener('mouseup', event => objListener.closeUp(event, elementWindow, objListener.closeUp));\n  // Для снятия сетевой ошибки\n  const elementNetError = elementWindow.querySelector(settings.classNetError);\n  if (elementNetError !== null) {\n    elementNetError.querySelector(settings.classNetErrorClose).addEventListener('click', () => {\n      elementNetError.classList.remove(settings.classNetErrorShow);\n    });\n  }\n}\n\n/**\n * Поднятие окна\n *\n * @param {HTMLElement} elementWindow Окно для поднятия\n * @param {Object} settings Настройки\n * @param {function} functionCloseKey Функция для снятия окна по клавише\n */\nexport function showPopup(elementWindow, settings, functionCloseKey) {\n  // Показать окно\n  elementWindow.classList.add(settings.classWindowOpenNotDot);\n  // Для снятия открытого окна по клавише\n  document.addEventListener('keydown', functionCloseKey);\n}\n\n/**\n * Закрытие окна\n *\n * @param {HTMLElement} elementWindow Окно для поднятия\n * @param {Object} settings Настройки\n * @param {function} functionCloseKey Функция для снятия окна по клавише\n */\nexport function closePopup(elementWindow, settings,functionCloseKey) {\n  // Закрыть окно\n  elementWindow.classList.remove(settings.classWindowOpenNotDot);\n  // Для снятия открытого окна по клавише\n  document.removeEventListener('keydown', functionCloseKey);\n}\n","/*\n Валидация\n */\n\n/**\n * Включение валидации\n *\n * @param {Object} settings Настройки\n */\nexport function enableValidation(settings) {\n  // Все формы\n  const formList = Array.from(document.querySelectorAll(settings.classForm));\n\n  formList.forEach((elementForm) => {\n    const elementButton = elementForm.querySelector(settings.classSubmitButton);\n    setEventListeners(elementForm, elementButton, settings);\n  });\n}\n/**\n * Очистка ошибок валидации для формы\n *\n * @param {HTMLElement} elementForm Форма для валидации\n * @param {HTMLElement} elementButton Кнопка формы\n * @param {Object} settings Настройки\n */\nexport function clearValidation(elementForm, elementButton, settings) {\n  // Все поля внутри формы\n  const listInput = Array.from(elementForm.querySelectorAll(settings.classInput));\n\n  listInput.forEach((elementInput) => {\n    hideInputError(elementInput, settings)  });\n\n  // Переключить кнопку\n  toggleStateButton(listInput, elementButton, settings);\n  // Убрать показ загрузки\n  elementButton.querySelector(settings.classSubmitLabel).textContent = \"Сохранить\";\n  elementButton.querySelector(settings.classSpinner).classList.remove(settings.classSpinnerVisible);\n}\n\n/**\n * Установка валидации на все поля\n *\n * @param {HTMLElement} elementForm Форма для валидации\n * @param {HTMLElement} elementButton Кнопка формы\n * @param {Object} settings Настройки\n */\nfunction setEventListeners(elementForm, elementButton, settings) {\n  // Все поля внутри формы\n  const listInput = Array.from(elementForm.querySelectorAll(settings.classInput));\n\n  listInput.forEach((elementInput) => {\n    elementInput.addEventListener('input', () => {\n      isValid(elementForm, elementInput, listInput, elementButton, settings);\n    });\n  });\n}\n\n/**\n * Проверка правильности введённых данных\n *\n * @param {HTMLElement} elementForm Форма\n * @param {HTMLElement} elementInput Поле ввода\n * @param {Array} listInput Список полей ввода\n * @param {HTMLElement} elementButton Кнопка на форме\n * @param {Object} settings Настройки\n */\nfunction isValid(elementForm, elementInput, listInput, elementButton, settings) {\n  if (elementInput.validity.patternMismatch) {\n    elementInput.setCustomValidity(elementInput.dataset.errorMessage);\n  } else {\n    elementInput.setCustomValidity(\"\");\n  }\n\n  if (!elementInput.validity.valid) {\n    showInputError(elementInput, elementInput.validationMessage, settings);\n  } else {\n    hideInputError(elementInput, settings);\n  }\n\n  // Переключить кнопку\n  toggleStateButton(listInput, elementButton, settings);\n}\n\n/**\n * Добавить класс с ошибкой\n *\n * @param {HTMLElement} elementInput Поле ввода\n * @param {String} errorMessage Сообщение об ошибке валидации\n * @param {Object} settings Настройки\n */\nfunction showInputError(elementInput, errorMessage, settings) {\n  const containerError = document.querySelector(`.popup__input-error-${elementInput.id}`);\n  elementInput.classList.add(settings.classErrorValidation);\n  // Прописать ошибку\n  containerError.textContent = errorMessage;\n  containerError.classList.add(settings.classValidationContainer);\n}\n\n/**\n * Удалить класс с ошибкой\n * @param {HTMLElement} elementInput Поле ввода\n * @param {Object} settings Настройки\n */\nfunction hideInputError(elementInput, settings) {\n  const containerError = document.querySelector(`.popup__input-error-${elementInput.id}`);\n  elementInput.classList.remove(settings.classErrorValidation);\n  containerError.textContent = '';\n  containerError.classList.remove(settings.classValidationContainer);\n}\n\n/**\n * Проверить валидность полей на форме\n *\n * @param {Array} listInput Список полей ввода\n */\nfunction hasInvalidForm(listInput) {\n  // проход по полям на форме\n  return listInput.some((elementInput) => {\n    return !elementInput.validity.valid;\n  })\n}\n\n/**\n * Переключить кнопку\n *\n * @param {Array} listInput Список полей ввода\n * @param {HTMLElement} elementButton Кнопка на форме\n * @param {Object} settings Настройки\n */\nfunction toggleStateButton(listInput, elementButton, settings) {\n  buttonSetState(elementButton, hasInvalidForm(listInput), settings);\n}\n\n/**\n * Проверка правильности введённых данных\n *\n * @param {HTMLElement} elementButton Кнопка на форме\n * @param {Boolean} disabled Установить в disabled\n * @param {Object} settings Настройки\n */\nexport function buttonSetState(elementButton, disabled, settings) {\n  elementButton.disabled = disabled;\n  if (disabled)  elementButton.classList.add(settings.classButtonInActive);\n  else elementButton.classList.remove(settings.classButtonInActive);\n}\n","/*\n Общение с API\n */\n\n/**\n * Собрать параметры для вызова API\n *\n * @param {Object} params Параметры\n * @param {String} params.nameMethod Имя метода в API\n * @param {String} params.method Метод вызова\n * @param {Object} params.body Тело запроса\n * @param {String} params.id Id для запросов\n * @param {Object} settings Настройки\n * @return {Promise} Сформированный промис\n */\nfunction buildPromise(params, settings) {\n  let url = `${settings.apiURL}${settings.apiIdGroup}/${params.nameMethod}`;\n\n  const options = {\n      method: params.method,\n      headers: {\n        authorization: settings.apiToken,\n      },\n    };\n\n  if (params.id !== null) {\n    url = url + `/${params.id}`;\n  }\n  if (params.body !== null) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params.body);\n  }\n\n  return fetch(url, options)\n}\n\n/**\n * Получить из API профиль и карты\n *\n * @param {Object} settings Настройки\n * @return {Promise}\n */\nexport function getProfileAndCard(settings) {\n  return Promise.all(\n  [buildPromise({\n             nameMethod: settings.methodProfile,\n             method: 'GET',\n             body: null,\n             id: null\n           },\n           settings),\n         buildPromise({\n             nameMethod: settings.methodCard,\n             method: 'GET',\n             body: null,\n             id: null\n           },\n           settings),\n        ]);\n}\n\n/**\n * Отправить в API профиль\n *\n * @param {Object} data Данные профиля\n * @param {String} data.name Имя профиля\n * @param {String} data.about Описание профиля\n * @param {Object} settings Настройки\n * @return {Promise}\n */\nexport function setProfile(data, settings) {\n  return buildPromise({\n      nameMethod: settings.methodProfile,\n      method: 'PATCH',\n      body: {name: data.name, about: data.about},\n      id: null\n    },\n    settings);\n}\n\n/**\n * Отправить в API новую карту\n *\n * @param {Object} data Данные карты\n * @param {String} data.name Имя карты\n * @param {String} data.link URL карты\n * @param {Object} settings Настройки\n * @return {Promise}\n */\nexport function setCard(data, settings) {\n  return buildPromise({\n      nameMethod: settings.methodCard,\n      method: 'POST',\n      body: {name: data.name, link: data.link},\n      id: null\n    },\n    settings);\n}\n\n/**\n * Удалить в API карту\n *\n * @param {Object} data Данные карты\n * @param {String} data.id Id карты\n * @param {HTMLElement} data.element Карта для удаления\n * @param {Object} settings Настройки\n * @return {Promise}\n */\nexport function deleteCard(data, settings) {\n  return  buildPromise({\n    nameMethod: settings.methodCard,\n    method: 'DELETE',\n    body: null,\n    id: data.id\n  },\n  settings);\n}\n\n/**\n * Отправить лайк на карту в API\n *\n * @param {Object} data Данные карты\n * @param {String} data.id Id карты\n * @param {Object} settings Настройки\n * @return {Promise}\n */\nexport function setLike(data, settings) {\n  return buildPromise({\n    nameMethod: settings.methodLike,\n    method: 'PUT',\n    body: null,\n    id: data.id\n  },\n  settings);\n}\n\n/**\n * Отправить удаление лайка на карте в API\n *\n * @param {Object} data Данные карты\n * @param {String} data.id Id карты\n * @param {Object} settings Настройки\n * @return {Promise}\n */\nexport function deleteLike(data, settings) {\n  return buildPromise({\n    nameMethod: settings.methodLike,\n    method: 'DELETE',\n    body: null, id: data.id\n  },\n  settings);\n}\n\n/**\n * Обновить аватар в API\n *\n * @param {Object} data Данные аватара\n * @param {String} data.link URL аватара\n * @param {HTMLElement} data.buttonSubmit Кнопка \"Сохранить\"\n * @param {Object} settings Настройки\n * @return {Promise}\n */\nexport function updateAvatar(data, settings) {\n  return buildPromise({\n    nameMethod: settings.methodAvatar,\n    method: 'PATCH',\n    body: {avatar: data.link},\n    id: null\n  },\n  settings);\n}\n\n","/*\n Главная, отсюда всё и начинается\n */\n\n// Импорт главного файла стилей\nimport '../pages/index.css';\n// Настройки проекта\nimport {settings} from '../components/settings.js';\n// Функция для создания карт при инициализации\nimport {createCard, removeCard, onLikeCard} from '../components/card.js';\n// Обработка окон\nimport {showPopup, closePopup, verifyEventMouseUp, verifyEventKeyDown, setModalWindowEventListeners} from '../components/modal.js';\n// Валидация\nimport {enableValidation, clearValidation, buttonSetState} from '../components/validation.js';\n// API\nimport {getProfileAndCard, setProfile, setCard, deleteCard, setLike, deleteLike, updateAvatar} from '../components/api.js';\n\n/** Заготовка */\nconst cardTemplate = document.querySelector(settings.idTemplate).content;\n\n/** DOM узлы по потребности */\nconst placesContainer = document.querySelector(settings.classPlacesList);      // Место для укладки карт\n\nconst windowAvatar = document.querySelector(settings.classWindowEditAvatar);   // Окно \"Редактировать аватар\"\nconst formAvatar = windowAvatar.querySelector(settings.classForm);             // Форма \"Редактировать аватар\"\nconst buttonAvatar = formAvatar.querySelector(settings.classSubmitButton);     // Кнопка \"Редактировать аватар\"\n\nconst windowProfile = document.querySelector(settings.classWindowEditProfile);  // Окно \"Редактировать профиль\"\nconst formProfile = windowProfile.querySelector(settings.classForm);            // Форма \"Редактировать профиль\"\nconst buttonProfile = formProfile.querySelector(settings.classSubmitButton);    // Кнопка \"Редактировать профиль\"\n\nconst windowCard = document.querySelector(settings.classWindowAddCard);         // Окно \"Добавить карту\"\nconst formCard = windowCard.querySelector(settings.classForm);                  // Форма \"Добавить карту\"\nconst buttonCard = formCard.querySelector(settings.classSubmitButton);          // Кнопка \"Добавить карту\"\n\nconst windowImage = document.querySelector(settings.classWindowViewImage);      // Окно \"Показать картинку\"\nconst viewImage= windowImage.querySelector(settings.classViewImage);            // Изображение на форме \"Показать картинку\"\n\nconst windowMessage = document.querySelector(settings.classWindowMessage);       // Окно \"Всякие сообщения\"\nconst captionMessage= windowMessage.querySelector(settings.classCaptionMessage); // Заголовок окна \"Всякие сообщения\"\nconst textMessage= windowMessage.querySelector(settings.classTextMessage);       // Текст окна \"Всякие сообщения\"\nconst buttonMessage = windowMessage.querySelector(settings.classSubmitButton);   // Кнопка окна \"Всякие сообщения\"\n\n// Редактировать аватар\ndocument.querySelector(settings.classButtonEditAvatar).addEventListener('click', openEditAvatar);\n\n// Редактировать профиль\ndocument.querySelector(settings.classButtonEditProfile).addEventListener('click', openEditProfile);\n\n// Добавление карту\ndocument.querySelector(settings.classButtonAddCard).addEventListener('click', openAddCard);\n\n\n/*\n * Работа с формами\n */\n\n/**\n * Поиск формы внутри окна\n *\n * @param {HTMLElement} elementWindow Окно формы\n * @return {string} Имя формы\n */\nfunction findForm(elementWindow) {\n  const form = elementWindow.querySelector(settings.classForm);\n  if (form === null) return '';\n\n  return form.getAttribute('name');\n}\n\n/**\n * Инициализация формы\n *\n * @param {HTMLElement} elementWindow Окно формы\n * @param {Object[]} bindFields связки полей\n * @param {string} bindFields.classPage Класс элемента из которого нужно взять значение\n * @param {string} bindFields.nameForm Имя на форме, куда нужно записать значение\n */\nfunction initPopup(elementWindow, bindFields) {\n  const nameForm = findForm(elementWindow);\n  if (nameForm === '') return;\n\n  bindFields.forEach(function (element,) {\n    if (element.nameForm === '') return;   // Этого поля нет на форме\n    const textElement = document.querySelector(element.classPage);\n    if (textElement === null) return;\n\n    document.forms[nameForm].elements[element.nameForm].value = textElement.textContent;\n  });\n}\n\n/**\n * Инициализация показа картинки\n *\n * @param {HTMLElement} elementWindow Окно формы\n * @param {HTMLElement} elementImages Картинка на странице\n */\nfunction initImage(elementWindow, elementImages) {\n  // Напихать в окно всё из карты\n  viewImage.setAttribute('src', elementImages.getAttribute('src'));\n  viewImage.setAttribute('alt', elementImages.getAttribute('alt'));\n\n  // Поискать карту выше и выше, вдруг враги разметку поменяли\n  const placeCurrent = elementImages.closest(settings.classListItem);\n  if (placeCurrent === null) return;\n\n  elementWindow.querySelector(settings.classViewCaption).textContent = placeCurrent.querySelector(settings.classCardTitle).textContent\n}\n\n/**\n * Очистка формы\n *\n * @param {HTMLElement} elementWindow Окно формы\n */\nfunction clearForm(elementWindow) {\n  const nameForm = findForm(elementWindow);\n  if (nameForm === '') return;\n\n  // Теперь можно и прибраться\n  document.forms[nameForm].reset();\n\n  // Для снятия сетевой ошибки\n  const elementNetError = elementWindow.querySelector(settings.classNetError);\n  if (elementNetError !== null) {\n    hideNetError(elementNetError);\n  }\n}\n\n/**\n * Результат формы для добавления профиля на страницу\n *\n * @param {Object} data Данные из API, если это после запроса, иначе {}\n * @param {Object[]} bindFields связки полей\n * @param {string} bindFields.classPage Класс элемента из которого нужно взять значение\n * @param {string} bindFields.nameAPI Имя в объекте из API\n * @param {string} bindFields.typeElement Тип элемента: 'text' или 'image'\n */\nfunction editProfile(data, bindFields) {\n  // Из объекта на страницу по настройке\n  bindFields.forEach(function (element) {\n    const htmlElement = document.querySelector(element.classPage);\n    if (htmlElement === null) return;\n\n    const value = data[element.nameAPI]\n\n    if (element.typeElement === 'text') htmlElement.textContent = value;\n    else if (element.typeElement === 'image') {\n      htmlElement.setAttribute('style', `background-image: url(${value});`);\n    }\n  });\n}\n\n/**\n * Результат формы для добавления карты на страницу\n *\n * @param {Object[]} data Данные из API, если это после запроса\n * @param {String} data.link URL картинки\n * @param {String} data.name URL картинки\n * @param {string} data.owner Владелец карты\n * @param {Object[]} data.likes Массив лайков\n */\nfunction createNewCard(data) {\n  // Обработка\n  const nameForm = findForm(windowCard);\n  if (nameForm === '') return;\n\n  initPlaces(data, true);\n}\n\n/**\n * Вывести на форму сетевую ошибку\n *\n * @param {HTMLElement} elementWindow Окно в котором произошла сетевая ошибка\n * @param {String} error Сообщение об ошибке\n */\nfunction showNetError(elementWindow, error) {\n  const elementNetError = elementWindow.querySelector(settings.classNetError);\n  elementNetError.classList.add(settings.classNetErrorShow);\n  elementWindow.querySelector(settings.classNetErrorMessage).textContent = error;\n  // Снять ошибку через 10 секунд\n  setTimeout(() => {\n    hideNetError(elementNetError);\n  }, settings.timeShowNetError * 1000);\n}\n\n/**\n * Снять сообщение о сетевой ошибки\n *\n * @param {HTMLElement} elementNetError Окно в котором произошла сетевая ошибка\n */\nfunction hideNetError(elementNetError) {\n  elementNetError.classList.remove(settings.classNetErrorShow);\n}\n\n/**\n *  Закончил работу с формами\n */\n\n/**\n * Закрывашка для всех окон\n *\n * @param {HTMLElement} elementWindow Окно формы\n * @param {function} functionCloseKey Функция для закрытия окна по клавише\n */\nfunction closeWindow(elementWindow, functionCloseKey) {\n  closePopup(elementWindow, settings, functionCloseKey);\n\n  if (elementWindow === windowMessage) buttonMessage.classList.remove(settings.classMarkerCall);\n\n  // ... и почистить форму\n  clearForm(elementWindow);\n}\n\n/**\n * Закрывашка для всех окон клику вне окна\n *\n * @param {Event} event Событие 'mouseup'\n * @param {HTMLElement} elementWindow Окно формы\n * @param {function} functionCloseKey Функция для закрытия окна по клавише\n */\nfunction closeWindowMouseUp(event, elementWindow, functionCloseKey) {\n  if (verifyEventMouseUp(event, settings)) closeWindow(elementWindow, functionCloseKey);\n}\n\n/**\n * Закрывашка для всех окон по клавише\n *\n * @param {Event} event Событие 'mouseup'\n */\nfunction closeWindowKey(event) {\n  if (!verifyEventKeyDown(event, settings)) return;\n\n  // Найти окно\n  const elementWindow = document.querySelector(settings.classWindowOpen);\n  if (elementWindow !== null) closeWindow(elementWindow, closeWindowKey);\n}\n\n/**\n * Запуск окна \"Редактировать аватар\"\n */\nfunction openEditAvatar() {\n  clearValidation(formAvatar, buttonAvatar, settings);\n\n  buttonSetState(buttonAvatar, true, settings);\n\n  showPopup(windowAvatar, settings, closeWindowKey);\n}\n\n/**\n * Обработка формы \"Редактировать аватар\"\n *\n * @param {Event} event Событие 'submit'\n */\nfunction submitAvatar(event) {\n  event.preventDefault();\n\n  // Отправить в API\n  const nameForm = findForm(windowAvatar);\n  if (nameForm === '') return;\n\n  // Из формы в API по настройке\n  const data = {};\n  settings.bindAvatar.forEach(function (element) {\n    data[element.name] = document.forms[nameForm].elements[element.nameForm].value\n  });\n  buttonAvatar.querySelector(settings.classSubmitLabel).textContent = \"Сохранение...\";\n  buttonAvatar.querySelector(settings.classSpinner).classList.add(settings.classSpinnerVisible);\n  updateAvatar(data, settings)\n    .then((response) =>{\n      // Не всё так хорошо?\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(`Ошибка при записи аватара:  ${response.status}, ${response.statusText}`);\n    })\n    .then((resJSON) => {\n      editProfile(resJSON, settings.bindProfile);\n      // Закрыть\n      closePopup(windowAvatar, settings, closeWindowKey);\n      // ... и почистить форму\n      clearForm(windowAvatar);\n    })\n    .catch((error) => {\n      showNetError(windowAvatar, error)\n    })\n    .finally(() =>{\n      buttonAvatar.querySelector(settings.classSubmitLabel).textContent = \"Сохранить\";\n      buttonAvatar.querySelector(settings.classSpinner).classList.remove(settings.classSpinnerVisible);\n    });\n}\n\n/**\n * Запуск окна \"Редактировать профиль\"\n */\nfunction openEditProfile() {\n  // Инициализировать поля\n  initPopup(windowProfile, settings.bindProfile);\n\n  clearValidation(windowProfile, buttonProfile, settings);\n  buttonSetState(buttonProfile, false, settings);\n\n  showPopup(windowProfile, settings, closeWindowKey);\n}\n\n/**\n * Обработка формы \"Редактировать профиль\"\n *\n * @param {Event} event Событие 'submit'\n */\nfunction submitProfile(event) {\n  event.preventDefault();\n\n  // Отправить в API\n  const nameForm = findForm(windowProfile);\n  if (nameForm === '') return;\n\n  // Из формы в API по настройке\n  const data = {};\n  settings.bindProfile.forEach(function (element) {\n    // Этот элемент в API не отправляется или его нет на форме\n    if ((element.nameAPI === '') || (element.nameForm === '')) return;\n    data[element.nameAPI] = document.forms[nameForm].elements[element.nameForm].value\n  });\n\n  buttonProfile.querySelector(settings.classSubmitLabel).textContent = \"Сохранение...\";\n  buttonProfile.querySelector(settings.classSpinner).classList.add(settings.classSpinnerVisible);\n  setProfile(data, settings)\n    .then((response) => {\n      // Не всё так хорошо?\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(`Ошибка при записи профиля:  ${response.status}, ${response.statusText}`);\n    })\n    .then((resJSON) => {\n      editProfile(resJSON, settings.bindProfile);\n      // Закрыть\n      closePopup(windowProfile, settings, closeWindowKey);\n      // ... и почистить форму\n      clearForm(windowProfile);\n    })\n    .catch((error) => {\n      showNetError(windowProfile, error)\n    })\n    .finally(() =>{\n      buttonProfile.querySelector(settings.classSubmitLabel).textContent = \"Сохранить\";\n      buttonProfile.querySelector(settings.classSpinner).classList.remove(settings.classSpinnerVisible);\n    });\n}\n\n/**\n * Запуск окна \"Добавить карту\"\n *\n */\nfunction openAddCard() {\n  clearValidation(formCard, buttonCard, settings);\n\n  buttonSetState(buttonCard, true, settings);\n\n  showPopup(windowCard, settings, closeWindowKey);\n}\n\n/**\n * Обработка формы \"Добавить карту\"\n *\n * @param {Event} event Событие 'submit'\n */\nfunction submitCard(event) {\n  event.preventDefault();\n\n  // Отправить в API\n  const nameForm = findForm(windowCard);\n  if (nameForm === '') return;\n\n  // Из формы в API по настройке\n  const data = {};\n  settings.bindCard.forEach(function (element) {\n    data[element.name] = document.forms[nameForm].elements[element.nameForm].value\n  });\n\n  buttonCard.querySelector(settings.classSubmitLabel).textContent = \"Сохранение...\";\n  buttonCard.querySelector(settings.classSpinner).classList.add(settings.classSpinnerVisible);\n  setCard(data, settings)\n    .then((response) => {\n      // Не всё так хорошо?\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(`Ошибка при записи новой карты:  ${response.status}, ${response.statusText}`);\n    })\n    .then((resJSON) => {\n      const arrayData = [resJSON];\n      createNewCard(arrayData);\n      // Закрыть\n      closePopup(windowCard, settings, closeWindowKey);\n      // ... и почистить форму\n      clearForm(windowCard);\n    })\n    .catch((error) => {\n      showNetError(windowCard, error)\n    })\n    .finally(() =>{\n      buttonCard.querySelector(settings.classSubmitLabel).textContent = \"Сохранить\";\n      buttonCard.querySelector(settings.classSpinner).classList.remove(settings.classSpinnerVisible);\n    });\n}\n\n/**\n *\n * @type {Object} Данные для дополнительных действий после закрытия окна с сообщением\n */\nconst dataToMessage = {\n  functionCall: null,\n  callback: null,\n  data: {},\n};\n\n/**\n * Обработка удаления Карты\n *\n * @callback onDeleteCard\n * @param {HTMLElement} elementPlace Карта\n * @param {String} idCard Id карты\n */\nfunction onDeleteCard(elementPlace, idCard) {\n  // Что запустить, после нажатия на кнопку\n  dataToMessage.functionCall = deleteCard;\n  dataToMessage.callback = removeCard;\n  dataToMessage.messageError = 'Ошибка при удалении карты';\n  dataToMessage.data.id = idCard;\n  dataToMessage.data.elementPlace = elementPlace;\n  buttonMessage.classList.add(settings.classMarkerCall);\n\n  // Сначала спросить\n  showMessage('Вы уверены?', '', 'Да');\n}\n\n/**\n * Показ картинки в отдельном окне\n *\n * @callback onOpenPreview\n * @param {Event} event Событие 'click'\n */\nfunction onOpenPreview(event) {\n  // Инициализировать картинку\n  initImage(windowImage, event.target);\n\n  showPopup(windowImage, settings, closeWindowKey);\n}\n\n/**\n * Показать окно \"Всякие сообщения\"\n *\n * @param {String} titleMessage Заголовок\n * @param {String} textLabel Текст сообщения\n * @param {String} textButton Текст на кнопке\n */\nfunction showMessage(titleMessage, textLabel, textButton) {\n  captionMessage.textContent = titleMessage;\n  textMessage.textContent = textLabel;\n  buttonMessage.textContent = textButton;\n\n  showPopup(windowMessage, settings, closeWindowKey);\n}\n\n/**\n * Нажата кнопка в окне \"Всякие сообщения\"\n *\n */\nfunction clickMessageButton() {\n  // Что-то исполнить?\n  if (buttonMessage.classList.contains(settings.classMarkerCall)) {\n    dataToMessage.functionCall(dataToMessage.data, settings)\n      .then((response) => {\n        // Не всё так хорошо?\n        if (response.ok) {\n          dataToMessage.callback(dataToMessage.data);\n          return;\n        }\n        return Promise.reject(`${dataToMessage.messageError}:  ${response.status}, ${response.statusText}`);\n      })\n      .catch((error) => {\n        showMessage(dataToMessage.messageError, error, 'Понятно'); // Ошибка при загрузке\n      });\n  }\n  // Закрыть\n  closeWindow(windowMessage, closeWindowKey);\n}\n\n/**\n * Вывести карты на страницу\n *\n * @param {Object[]} initCards Массив описаний карт\n * @param {string} initCards.name Наименование Места\n * @param {string} initCards.link URL картинки\n * @param {string} initCards.owner Владелец карты\n * @param {Object[]} initCards.likes Массив лайков\n * @param {boolean} addToBegin Создавать карты в начале\n */\nfunction initPlaces(initCards, addToBegin) {\n  const objFunction = {\n    onDeleteCard,\n    onOpenPreview,\n    onLikeCard,\n    deleteLike,\n    setLike,\n    showMessage,\n  };\n  initCards.forEach(function (item) {\n    let newPlace = createCard(item, cardTemplate, settings, objFunction);\n    if (addToBegin) placesContainer.prepend(newPlace)\n    else placesContainer.append(newPlace);\n  });\n}\n\n// Стартуем\n/**\n * callback'и для окна \"Редактировать профиль\"\n *\n * @type {object} callback'и для окна \"Редактировать профиль\"\n */\nconst objListener = {\n  close: closeWindow,\n  closeUp: closeWindowMouseUp,\n};\n\n// 1. Загрузки через API\n//    а. Профиль и карты\ngetProfileAndCard(settings)\n  .then((responses) => {\n    // Не всё так хорошо?\n    if ((!responses[0].ok) || (!responses[1].ok)) {\n      let errorNumber;\n      if (!responses[0].ok) errorNumber = 0\n      else errorNumber = 1;\n      const what = errorNumber === 0 ? 'профиля' : 'карт';\n\n      return Promise.reject(`Ошибка при загрузке ${what}:  ${responses[errorNumber].status}, ${responses[errorNumber].statusText}`);\n    }\n    return responses;\n  })\n  .then((responses) => {\n    return Promise.all(responses.map(r => r.json()));\n  })\n  .then((resJSONs) => {\n    // Профиль\n    settings.apiIdUser = resJSONs[0]['_id'];\n    editProfile(resJSONs[0], settings.bindProfile);\n    // Карты\n    initPlaces(resJSONs[1], false);\n  })\n  .catch((error) => {\n    showMessage('Ошибка при загрузке', error, 'Понятно'); // Ошибка при загрузке\n  });\n\n// 2. Инициализация модальных окон\n//    а. Окно \"Редактировать профиль\"\n// Обработка результатов формы\nformProfile.addEventListener(\"submit\", submitProfile);\n\nsetModalWindowEventListeners(windowProfile, settings, objListener);\n\n//    б. Окно \"Добавить карту\"\n// Обработка результатов формы\nformCard.addEventListener(\"submit\", submitCard);\n\nsetModalWindowEventListeners(windowCard, settings, objListener);\n\n//    в. Окно \"Показ картинки\"\nsetModalWindowEventListeners(windowImage, settings, objListener);\n\n//    г. Окно \"Обновить аватар\"\n// Обработка результатов формы\nformAvatar.addEventListener(\"submit\", submitAvatar);\n\nsetModalWindowEventListeners(windowAvatar, settings, objListener);\n\n//    д. Окно \"Всякие сообщения\"\n// Обработка результатов формы\nbuttonMessage.addEventListener('click', clickMessageButton);\n\nsetModalWindowEventListeners(windowMessage, settings, objListener);\n\n// 3. Инициализация валидации\nenableValidation(settings);\n"],"names":["settings","idTemplate","classPlacesList","classPlacesItem","classCardImage","classCardTitle","classCardDeleteButton","classListItem","classWindowPopup","classWindowOpen","classWindowOpenNotDot","classWindowAnimatedNotDot","classElementClose","classForm","classInput","classSubmitButton","classSubmitLabel","classSpinner","classSpinnerVisible","classNetError","classNetErrorShow","classNetErrorClose","classNetErrorMessage","timeShowNetError","keysClose","classButtonEditAvatar","classWindowEditAvatar","bindAvatar","name","nameForm","classButtonEditProfile","classWindowEditProfile","bindProfile","classPage","nameAPI","typeElement","classButtonAddCard","classWindowAddCard","bindCard","classWindowViewImage","classViewImage","classViewCaption","classWindowMessage","classCaptionMessage","classTextMessage","classMarkerCall","classLikeButton","classLikeYesNotDot","classLikesCount","classLikesTooltip","classItemTooltip","classTitleTooltip","classImageTooltip","classTextTooltip","classMarginTooltip","countLikeInTooltip","classErrorValidation","classValidationContainer","classButtonInActive","apiIdUser","apiURL","apiIdGroup","apiToken","methodProfile","methodCard","methodLike","methodAvatar","initialLike","elementPlace","objectPlace","likesCount","likes","length","querySelector","textContent","toString","likesTooltip","child","lastElementChild","removeChild","listItem","document","createElement","classList","add","append","imageAvatar","setAttribute","owner","avatar","concat","spanName","listItemTitle","addLike","overLike","forEach","like","onLikeCard","event","idCard","objectFunctions","target","promiseLike","what","elementCard","closest","elementLike","data","id","contains","deleteLike","setLike","then","response","ok","json","Promise","reject","status","statusText","resJSON","parentElement","toggle","likeCard","catch","error","showMessage","removeCard","remove","setModalWindowEventListeners","elementWindow","objListener","addEventListener","close","closeUp","elementNetError","showPopup","functionCloseKey","closePopup","removeEventListener","clearValidation","elementForm","elementButton","listInput","Array","from","querySelectorAll","elementInput","hideInputError","toggleStateButton","containerError","buttonSetState","some","validity","valid","hasInvalidForm","disabled","buildPromise","params","url","nameMethod","options","method","headers","authorization","body","JSON","stringify","fetch","deleteCard","cardTemplate","content","placesContainer","windowAvatar","formAvatar","buttonAvatar","windowProfile","formProfile","buttonProfile","windowCard","formCard","buttonCard","windowImage","viewImage","windowMessage","captionMessage","textMessage","buttonMessage","findForm","form","getAttribute","clearForm","forms","reset","hideNetError","editProfile","bindFields","element","htmlElement","value","showNetError","setTimeout","closeWindow","closeWindowKey","findIndex","key","verifyEventKeyDown","textElement","elements","dataToMessage","functionCall","callback","onDeleteCard","messageError","onOpenPreview","elementImages","placeCurrent","initImage","titleMessage","textLabel","textButton","initPlaces","initCards","addToBegin","objFunction","item","newPlace","cloneNode","cardImage","link","elementCardDeleteButton","createCard","prepend","verifyEventMouseUp","all","getProfileAndCard","responses","errorNumber","map","r","resJSONs","preventDefault","about","setProfile","finally","setCard","createNewCard","updateAvatar","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","enableValidation"],"sourceRoot":""}